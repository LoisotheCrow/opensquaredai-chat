/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var e={9669:(e,t,n)=>{e.exports=n(1609)},5448:(e,t,n)=>{"use strict";var r=n(4867),a=n(6026),o=n(4372),i=n(5327),l=n(4097),s=n(4109),u=n(7985),c=n(5061),d=n(7874),f=n(5263);e.exports=function(e){return new Promise((function(t,n){var p,h=e.data,A=e.headers,m=e.responseType;function g(){e.cancelToken&&e.cancelToken.unsubscribe(p),e.signal&&e.signal.removeEventListener("abort",p)}r.isFormData(h)&&delete A["Content-Type"];var v=new XMLHttpRequest;if(e.auth){var b=e.auth.username||"",y=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";A.Authorization="Basic "+btoa(b+":"+y)}var E=l(e.baseURL,e.url);function w(){if(v){var r="getAllResponseHeaders"in v?s(v.getAllResponseHeaders()):null,o={data:m&&"text"!==m&&"json"!==m?v.response:v.responseText,status:v.status,statusText:v.statusText,headers:r,config:e,request:v};a((function(e){t(e),g()}),(function(e){n(e),g()}),o),v=null}}if(v.open(e.method.toUpperCase(),i(E,e.params,e.paramsSerializer),!0),v.timeout=e.timeout,"onloadend"in v?v.onloadend=w:v.onreadystatechange=function(){v&&4===v.readyState&&(0!==v.status||v.responseURL&&0===v.responseURL.indexOf("file:"))&&setTimeout(w)},v.onabort=function(){v&&(n(c("Request aborted",e,"ECONNABORTED",v)),v=null)},v.onerror=function(){n(c("Network Error",e,null,v)),v=null},v.ontimeout=function(){var t=e.timeout?"timeout of "+e.timeout+"ms exceeded":"timeout exceeded",r=e.transitional||d;e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),n(c(t,e,r.clarifyTimeoutError?"ETIMEDOUT":"ECONNABORTED",v)),v=null},r.isStandardBrowserEnv()){var k=(e.withCredentials||u(E))&&e.xsrfCookieName?o.read(e.xsrfCookieName):void 0;k&&(A[e.xsrfHeaderName]=k)}"setRequestHeader"in v&&r.forEach(A,(function(e,t){void 0===h&&"content-type"===t.toLowerCase()?delete A[t]:v.setRequestHeader(t,e)})),r.isUndefined(e.withCredentials)||(v.withCredentials=!!e.withCredentials),m&&"json"!==m&&(v.responseType=e.responseType),"function"==typeof e.onDownloadProgress&&v.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&v.upload&&v.upload.addEventListener("progress",e.onUploadProgress),(e.cancelToken||e.signal)&&(p=function(e){v&&(n(!e||e&&e.type?new f("canceled"):e),v.abort(),v=null)},e.cancelToken&&e.cancelToken.subscribe(p),e.signal&&(e.signal.aborted?p():e.signal.addEventListener("abort",p))),h||(h=null),v.send(h)}))}},1609:(e,t,n)=>{"use strict";var r=n(4867),a=n(1849),o=n(321),i=n(7185),l=function e(t){var n=new o(t),l=a(o.prototype.request,n);return r.extend(l,o.prototype,n),r.extend(l,n),l.create=function(n){return e(i(t,n))},l}(n(5546));l.Axios=o,l.Cancel=n(5263),l.CancelToken=n(4972),l.isCancel=n(6502),l.VERSION=n(7288).version,l.all=function(e){return Promise.all(e)},l.spread=n(8713),l.isAxiosError=n(6268),e.exports=l,e.exports.default=l},5263:e=>{"use strict";function t(e){this.message=e}t.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},t.prototype.__CANCEL__=!0,e.exports=t},4972:(e,t,n)=>{"use strict";var r=n(5263);function a(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var n=this;this.promise.then((function(e){if(n._listeners){var t,r=n._listeners.length;for(t=0;t<r;t++)n._listeners[t](e);n._listeners=null}})),this.promise.then=function(e){var t,r=new Promise((function(e){n.subscribe(e),t=e})).then(e);return r.cancel=function(){n.unsubscribe(t)},r},e((function(e){n.reason||(n.reason=new r(e),t(n.reason))}))}a.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},a.prototype.subscribe=function(e){this.reason?e(this.reason):this._listeners?this._listeners.push(e):this._listeners=[e]},a.prototype.unsubscribe=function(e){if(this._listeners){var t=this._listeners.indexOf(e);-1!==t&&this._listeners.splice(t,1)}},a.source=function(){var e;return{token:new a((function(t){e=t})),cancel:e}},e.exports=a},6502:e=>{"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},321:(e,t,n)=>{"use strict";var r=n(4867),a=n(5327),o=n(782),i=n(3572),l=n(7185),s=n(4875),u=s.validators;function c(e){this.defaults=e,this.interceptors={request:new o,response:new o}}c.prototype.request=function(e,t){"string"==typeof e?(t=t||{}).url=e:t=e||{},(t=l(this.defaults,t)).method?t.method=t.method.toLowerCase():this.defaults.method?t.method=this.defaults.method.toLowerCase():t.method="get";var n=t.transitional;void 0!==n&&s.assertOptions(n,{silentJSONParsing:u.transitional(u.boolean),forcedJSONParsing:u.transitional(u.boolean),clarifyTimeoutError:u.transitional(u.boolean)},!1);var r=[],a=!0;this.interceptors.request.forEach((function(e){"function"==typeof e.runWhen&&!1===e.runWhen(t)||(a=a&&e.synchronous,r.unshift(e.fulfilled,e.rejected))}));var o,c=[];if(this.interceptors.response.forEach((function(e){c.push(e.fulfilled,e.rejected)})),!a){var d=[i,void 0];for(Array.prototype.unshift.apply(d,r),d=d.concat(c),o=Promise.resolve(t);d.length;)o=o.then(d.shift(),d.shift());return o}for(var f=t;r.length;){var p=r.shift(),h=r.shift();try{f=p(f)}catch(e){h(e);break}}try{o=i(f)}catch(e){return Promise.reject(e)}for(;c.length;)o=o.then(c.shift(),c.shift());return o},c.prototype.getUri=function(e){return e=l(this.defaults,e),a(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},r.forEach(["delete","get","head","options"],(function(e){c.prototype[e]=function(t,n){return this.request(l(n||{},{method:e,url:t,data:(n||{}).data}))}})),r.forEach(["post","put","patch"],(function(e){c.prototype[e]=function(t,n,r){return this.request(l(r||{},{method:e,url:t,data:n}))}})),e.exports=c},782:(e,t,n)=>{"use strict";var r=n(4867);function a(){this.handlers=[]}a.prototype.use=function(e,t,n){return this.handlers.push({fulfilled:e,rejected:t,synchronous:!!n&&n.synchronous,runWhen:n?n.runWhen:null}),this.handlers.length-1},a.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},a.prototype.forEach=function(e){r.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=a},4097:(e,t,n)=>{"use strict";var r=n(1793),a=n(7303);e.exports=function(e,t){return e&&!r(t)?a(e,t):t}},5061:(e,t,n)=>{"use strict";var r=n(481);e.exports=function(e,t,n,a,o){var i=new Error(e);return r(i,t,n,a,o)}},3572:(e,t,n)=>{"use strict";var r=n(4867),a=n(8527),o=n(6502),i=n(5546),l=n(5263);function s(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new l("canceled")}e.exports=function(e){return s(e),e.headers=e.headers||{},e.data=a.call(e,e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),r.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||i.adapter)(e).then((function(t){return s(e),t.data=a.call(e,t.data,t.headers,e.transformResponse),t}),(function(t){return o(t)||(s(e),t&&t.response&&(t.response.data=a.call(e,t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},481:e=>{"use strict";e.exports=function(e,t,n,r,a){return e.config=t,n&&(e.code=n),e.request=r,e.response=a,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code,status:this.response&&this.response.status?this.response.status:null}},e}},7185:(e,t,n)=>{"use strict";var r=n(4867);e.exports=function(e,t){t=t||{};var n={};function a(e,t){return r.isPlainObject(e)&&r.isPlainObject(t)?r.merge(e,t):r.isPlainObject(t)?r.merge({},t):r.isArray(t)?t.slice():t}function o(n){return r.isUndefined(t[n])?r.isUndefined(e[n])?void 0:a(void 0,e[n]):a(e[n],t[n])}function i(e){if(!r.isUndefined(t[e]))return a(void 0,t[e])}function l(n){return r.isUndefined(t[n])?r.isUndefined(e[n])?void 0:a(void 0,e[n]):a(void 0,t[n])}function s(n){return n in t?a(e[n],t[n]):n in e?a(void 0,e[n]):void 0}var u={url:i,method:i,data:i,baseURL:l,transformRequest:l,transformResponse:l,paramsSerializer:l,timeout:l,timeoutMessage:l,withCredentials:l,adapter:l,responseType:l,xsrfCookieName:l,xsrfHeaderName:l,onUploadProgress:l,onDownloadProgress:l,decompress:l,maxContentLength:l,maxBodyLength:l,transport:l,httpAgent:l,httpsAgent:l,cancelToken:l,socketPath:l,responseEncoding:l,validateStatus:s};return r.forEach(Object.keys(e).concat(Object.keys(t)),(function(e){var t=u[e]||o,a=t(e);r.isUndefined(a)&&t!==s||(n[e]=a)})),n}},6026:(e,t,n)=>{"use strict";var r=n(5061);e.exports=function(e,t,n){var a=n.config.validateStatus;n.status&&a&&!a(n.status)?t(r("Request failed with status code "+n.status,n.config,null,n.request,n)):e(n)}},8527:(e,t,n)=>{"use strict";var r=n(4867),a=n(5546);e.exports=function(e,t,n){var o=this||a;return r.forEach(n,(function(n){e=n.call(o,e,t)})),e}},5546:(e,t,n)=>{"use strict";var r=n(4867),a=n(6016),o=n(481),i=n(7874),l={"Content-Type":"application/x-www-form-urlencoded"};function s(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var u,c={transitional:i,adapter:(("undefined"!=typeof XMLHttpRequest||"undefined"!=typeof process&&"[object process]"===Object.prototype.toString.call(process))&&(u=n(5448)),u),transformRequest:[function(e,t){return a(t,"Accept"),a(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(s(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)||t&&"application/json"===t["Content-Type"]?(s(t,"application/json"),function(e,t,n){if(r.isString(e))try{return(0,JSON.parse)(e),r.trim(e)}catch(e){if("SyntaxError"!==e.name)throw e}return(0,JSON.stringify)(e)}(e)):e}],transformResponse:[function(e){var t=this.transitional||c.transitional,n=t&&t.silentJSONParsing,a=t&&t.forcedJSONParsing,i=!n&&"json"===this.responseType;if(i||a&&r.isString(e)&&e.length)try{return JSON.parse(e)}catch(e){if(i){if("SyntaxError"===e.name)throw o(e,this,"E_JSON_PARSE");throw e}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};r.forEach(["delete","get","head"],(function(e){c.headers[e]={}})),r.forEach(["post","put","patch"],(function(e){c.headers[e]=r.merge(l)})),e.exports=c},7874:e=>{"use strict";e.exports={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1}},7288:e=>{e.exports={version:"0.26.1"}},1849:e=>{"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},5327:(e,t,n)=>{"use strict";var r=n(4867);function a(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var o;if(n)o=n(t);else if(r.isURLSearchParams(t))o=t.toString();else{var i=[];r.forEach(t,(function(e,t){null!=e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,(function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),i.push(a(t)+"="+a(e))})))})),o=i.join("&")}if(o){var l=e.indexOf("#");-1!==l&&(e=e.slice(0,l)),e+=(-1===e.indexOf("?")?"?":"&")+o}return e}},7303:e=>{"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},4372:(e,t,n)=>{"use strict";var r=n(4867);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,a,o,i){var l=[];l.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&l.push("expires="+new Date(n).toGMTString()),r.isString(a)&&l.push("path="+a),r.isString(o)&&l.push("domain="+o),!0===i&&l.push("secure"),document.cookie=l.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},1793:e=>{"use strict";e.exports=function(e){return/^([a-z][a-z\d+\-.]*:)?\/\//i.test(e)}},6268:(e,t,n)=>{"use strict";var r=n(4867);e.exports=function(e){return r.isObject(e)&&!0===e.isAxiosError}},7985:(e,t,n)=>{"use strict";var r=n(4867);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function a(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=a(window.location.href),function(t){var n=r.isString(t)?a(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},6016:(e,t,n)=>{"use strict";var r=n(4867);e.exports=function(e,t){r.forEach(e,(function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])}))}},4109:(e,t,n)=>{"use strict";var r=n(4867),a=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,o,i={};return e?(r.forEach(e.split("\n"),(function(e){if(o=e.indexOf(":"),t=r.trim(e.substr(0,o)).toLowerCase(),n=r.trim(e.substr(o+1)),t){if(i[t]&&a.indexOf(t)>=0)return;i[t]="set-cookie"===t?(i[t]?i[t]:[]).concat([n]):i[t]?i[t]+", "+n:n}})),i):i}},8713:e=>{"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},4875:(e,t,n)=>{"use strict";var r=n(7288).version,a={};["object","boolean","number","function","string","symbol"].forEach((function(e,t){a[e]=function(n){return typeof n===e||"a"+(t<1?"n ":" ")+e}}));var o={};a.transitional=function(e,t,n){function a(e,t){return"[Axios v"+r+"] Transitional option '"+e+"'"+t+(n?". "+n:"")}return function(n,r,i){if(!1===e)throw new Error(a(r," has been removed"+(t?" in "+t:"")));return t&&!o[r]&&(o[r]=!0,console.warn(a(r," has been deprecated since v"+t+" and will be removed in the near future"))),!e||e(n,r,i)}},e.exports={assertOptions:function(e,t,n){if("object"!=typeof e)throw new TypeError("options must be an object");for(var r=Object.keys(e),a=r.length;a-- >0;){var o=r[a],i=t[o];if(i){var l=e[o],s=void 0===l||i(l,o,e);if(!0!==s)throw new TypeError("option "+o+" must be "+s)}else if(!0!==n)throw Error("Unknown option "+o)}},validators:a}},4867:(e,t,n)=>{"use strict";var r=n(1849),a=Object.prototype.toString;function o(e){return Array.isArray(e)}function i(e){return void 0===e}function l(e){return"[object ArrayBuffer]"===a.call(e)}function s(e){return null!==e&&"object"==typeof e}function u(e){if("[object Object]"!==a.call(e))return!1;var t=Object.getPrototypeOf(e);return null===t||t===Object.prototype}function c(e){return"[object Function]"===a.call(e)}function d(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),o(e))for(var n=0,r=e.length;n<r;n++)t.call(null,e[n],n,e);else for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&t.call(null,e[a],a,e)}e.exports={isArray:o,isArrayBuffer:l,isBuffer:function(e){return null!==e&&!i(e)&&null!==e.constructor&&!i(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){return"[object FormData]"===a.call(e)},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&l(e.buffer)},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:s,isPlainObject:u,isUndefined:i,isDate:function(e){return"[object Date]"===a.call(e)},isFile:function(e){return"[object File]"===a.call(e)},isBlob:function(e){return"[object Blob]"===a.call(e)},isFunction:c,isStream:function(e){return s(e)&&c(e.pipe)},isURLSearchParams:function(e){return"[object URLSearchParams]"===a.call(e)},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:d,merge:function e(){var t={};function n(n,r){u(t[r])&&u(n)?t[r]=e(t[r],n):u(n)?t[r]=e({},n):o(n)?t[r]=n.slice():t[r]=n}for(var r=0,a=arguments.length;r<a;r++)d(arguments[r],n);return t},extend:function(e,t,n){return d(t,(function(t,a){e[a]=n&&"function"==typeof t?r(t,n):t})),e},trim:function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")},stripBOM:function(e){return 65279===e.charCodeAt(0)&&(e=e.slice(1)),e}}},3459:(e,t,n)=>{"use strict";n.d(t,{Z:()=>l});var r=n(7537),a=n.n(r),o=n(3645),i=n.n(o)()(a());i.push([e.id,'/*\n! tailwindcss v3.2.7 | MIT License | https://tailwindcss.com\n*//*\n1. Prevent padding and border from affecting element width. (https://github.com/mozdevs/cssremedy/issues/4)\n2. Allow adding a border to an element by just adding a border-width. (https://github.com/tailwindcss/tailwindcss/pull/116)\n*/\n\n*,\n::before,\n::after {\n  box-sizing: border-box; /* 1 */\n  border-width: 0; /* 2 */\n  border-style: solid; /* 2 */\n  border-color: #e5e7eb; /* 2 */\n}\n\n::before,\n::after {\n  --tw-content: \'\';\n}\n\n/*\n1. Use a consistent sensible line-height in all browsers.\n2. Prevent adjustments of font size after orientation changes in iOS.\n3. Use a more readable tab size.\n4. Use the user\'s configured `sans` font-family by default.\n5. Use the user\'s configured `sans` font-feature-settings by default.\n*/\n\nhtml {\n  line-height: 1.5; /* 1 */\n  -webkit-text-size-adjust: 100%; /* 2 */\n  -moz-tab-size: 4; /* 3 */\n  -o-tab-size: 4;\n     tab-size: 4; /* 3 */\n  font-family: ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, Ubuntu, Cantarell, Noto Sans, sans-serif, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji"; /* 4 */\n  font-feature-settings: normal; /* 5 */\n}\n\n/*\n1. Remove the margin in all browsers.\n2. Inherit line-height from `html` so users can set them as a class directly on the `html` element.\n*/\n\nbody {\n  margin: 0; /* 1 */\n  line-height: inherit; /* 2 */\n}\n\n/*\n1. Add the correct height in Firefox.\n2. Correct the inheritance of border color in Firefox. (https://bugzilla.mozilla.org/show_bug.cgi?id=190655)\n3. Ensure horizontal rules are visible by default.\n*/\n\nhr {\n  height: 0; /* 1 */\n  color: inherit; /* 2 */\n  border-top-width: 1px; /* 3 */\n}\n\n/*\nAdd the correct text decoration in Chrome, Edge, and Safari.\n*/\n\nabbr:where([title]) {\n  text-decoration: underline;\n  -webkit-text-decoration: underline dotted;\n          text-decoration: underline dotted;\n}\n\n/*\nRemove the default font size and weight for headings.\n*/\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  font-size: inherit;\n  font-weight: inherit;\n}\n\n/*\nReset links to optimize for opt-in styling instead of opt-out.\n*/\n\na {\n  color: inherit;\n  text-decoration: inherit;\n}\n\n/*\nAdd the correct font weight in Edge and Safari.\n*/\n\nb,\nstrong {\n  font-weight: bolder;\n}\n\n/*\n1. Use the user\'s configured `mono` font family by default.\n2. Correct the odd `em` font sizing in all browsers.\n*/\n\ncode,\nkbd,\nsamp,\npre {\n  font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace; /* 1 */\n  font-size: 1em; /* 2 */\n}\n\n/*\nAdd the correct font size in all browsers.\n*/\n\nsmall {\n  font-size: 80%;\n}\n\n/*\nPrevent `sub` and `sup` elements from affecting the line height in all browsers.\n*/\n\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\nsub {\n  bottom: -0.25em;\n}\n\nsup {\n  top: -0.5em;\n}\n\n/*\n1. Remove text indentation from table contents in Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=999088, https://bugs.webkit.org/show_bug.cgi?id=201297)\n2. Correct table border color inheritance in all Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=935729, https://bugs.webkit.org/show_bug.cgi?id=195016)\n3. Remove gaps between table borders by default.\n*/\n\ntable {\n  text-indent: 0; /* 1 */\n  border-color: inherit; /* 2 */\n  border-collapse: collapse; /* 3 */\n}\n\n/*\n1. Change the font styles in all browsers.\n2. Remove the margin in Firefox and Safari.\n3. Remove default padding in all browsers.\n*/\n\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  font-family: inherit; /* 1 */\n  font-size: 100%; /* 1 */\n  font-weight: inherit; /* 1 */\n  line-height: inherit; /* 1 */\n  color: inherit; /* 1 */\n  margin: 0; /* 2 */\n  padding: 0; /* 3 */\n}\n\n/*\nRemove the inheritance of text transform in Edge and Firefox.\n*/\n\nbutton,\nselect {\n  text-transform: none;\n}\n\n/*\n1. Correct the inability to style clickable types in iOS and Safari.\n2. Remove default button styles.\n*/\n\nbutton,\n[type=\'button\'],\n[type=\'reset\'],\n[type=\'submit\'] {\n  -webkit-appearance: button; /* 1 */\n  background-color: transparent; /* 2 */\n  background-image: none; /* 2 */\n}\n\n/*\nUse the modern Firefox focus style for all focusable elements.\n*/\n\n:-moz-focusring {\n  outline: auto;\n}\n\n/*\nRemove the additional `:invalid` styles in Firefox. (https://github.com/mozilla/gecko-dev/blob/2f9eacd9d3d995c937b4251a5557d95d494c9be1/layout/style/res/forms.css#L728-L737)\n*/\n\n:-moz-ui-invalid {\n  box-shadow: none;\n}\n\n/*\nAdd the correct vertical alignment in Chrome and Firefox.\n*/\n\nprogress {\n  vertical-align: baseline;\n}\n\n/*\nCorrect the cursor style of increment and decrement buttons in Safari.\n*/\n\n::-webkit-inner-spin-button,\n::-webkit-outer-spin-button {\n  height: auto;\n}\n\n/*\n1. Correct the odd appearance in Chrome and Safari.\n2. Correct the outline style in Safari.\n*/\n\n[type=\'search\'] {\n  -webkit-appearance: textfield; /* 1 */\n  outline-offset: -2px; /* 2 */\n}\n\n/*\nRemove the inner padding in Chrome and Safari on macOS.\n*/\n\n::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n\n/*\n1. Correct the inability to style clickable types in iOS and Safari.\n2. Change font properties to `inherit` in Safari.\n*/\n\n::-webkit-file-upload-button {\n  -webkit-appearance: button; /* 1 */\n  font: inherit; /* 2 */\n}\n\n/*\nAdd the correct display in Chrome and Safari.\n*/\n\nsummary {\n  display: list-item;\n}\n\n/*\nRemoves the default spacing and border for appropriate elements.\n*/\n\nblockquote,\ndl,\ndd,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\nhr,\nfigure,\np,\npre {\n  margin: 0;\n}\n\nfieldset {\n  margin: 0;\n  padding: 0;\n}\n\nlegend {\n  padding: 0;\n}\n\nol,\nul,\nmenu {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n\n/*\nPrevent resizing textareas horizontally by default.\n*/\n\ntextarea {\n  resize: vertical;\n}\n\n/*\n1. Reset the default placeholder opacity in Firefox. (https://github.com/tailwindlabs/tailwindcss/issues/3300)\n2. Set the default placeholder color to the user\'s configured gray 400 color.\n*/\n\ninput::-moz-placeholder, textarea::-moz-placeholder {\n  opacity: 1; /* 1 */\n  color: #9ca3af; /* 2 */\n}\n\ninput::placeholder,\ntextarea::placeholder {\n  opacity: 1; /* 1 */\n  color: #9ca3af; /* 2 */\n}\n\n/*\nSet the default cursor for buttons.\n*/\n\nbutton,\n[role="button"] {\n  cursor: pointer;\n}\n\n/*\nMake sure disabled buttons don\'t get the pointer cursor.\n*/\n:disabled {\n  cursor: default;\n}\n\n/*\n1. Make replaced elements `display: block` by default. (https://github.com/mozdevs/cssremedy/issues/14)\n2. Add `vertical-align: middle` to align replaced elements more sensibly by default. (https://github.com/jensimmons/cssremedy/issues/14#issuecomment-634934210)\n   This can trigger a poorly considered lint error in some tools but is included by design.\n*/\n\nimg,\nsvg,\nvideo,\ncanvas,\naudio,\niframe,\nembed,\nobject {\n  display: block; /* 1 */\n  vertical-align: middle; /* 2 */\n}\n\n/*\nConstrain images and videos to the parent width and preserve their intrinsic aspect ratio. (https://github.com/mozdevs/cssremedy/issues/14)\n*/\n\nimg,\nvideo {\n  max-width: 100%;\n  height: auto;\n}\n\n/* Make elements with the HTML hidden attribute stay hidden by default */\n[hidden] {\n  display: none;\n}\r\n  html, body, #root {\r\n    height: 100%;\r\n  }\r\n\r\n  ::-webkit-scrollbar {\r\n    -webkit-appearance: none;\r\n            appearance: none;\r\n    width: 0;\r\n  }\n\n*, ::before, ::after {\n  --tw-border-spacing-x: 0;\n  --tw-border-spacing-y: 0;\n  --tw-translate-x: 0;\n  --tw-translate-y: 0;\n  --tw-rotate: 0;\n  --tw-skew-x: 0;\n  --tw-skew-y: 0;\n  --tw-scale-x: 1;\n  --tw-scale-y: 1;\n  --tw-pan-x:  ;\n  --tw-pan-y:  ;\n  --tw-pinch-zoom:  ;\n  --tw-scroll-snap-strictness: proximity;\n  --tw-ordinal:  ;\n  --tw-slashed-zero:  ;\n  --tw-numeric-figure:  ;\n  --tw-numeric-spacing:  ;\n  --tw-numeric-fraction:  ;\n  --tw-ring-inset:  ;\n  --tw-ring-offset-width: 0px;\n  --tw-ring-offset-color: #fff;\n  --tw-ring-color: rgba(59, 130, 246, 0.5);\n  --tw-ring-offset-shadow: 0 0 rgba(0,0,0,0);\n  --tw-ring-shadow: 0 0 rgba(0,0,0,0);\n  --tw-shadow: 0 0 rgba(0,0,0,0);\n  --tw-shadow-colored: 0 0 rgba(0,0,0,0);\n  --tw-blur:  ;\n  --tw-brightness:  ;\n  --tw-contrast:  ;\n  --tw-grayscale:  ;\n  --tw-hue-rotate:  ;\n  --tw-invert:  ;\n  --tw-saturate:  ;\n  --tw-sepia:  ;\n  --tw-drop-shadow:  ;\n  --tw-backdrop-blur:  ;\n  --tw-backdrop-brightness:  ;\n  --tw-backdrop-contrast:  ;\n  --tw-backdrop-grayscale:  ;\n  --tw-backdrop-hue-rotate:  ;\n  --tw-backdrop-invert:  ;\n  --tw-backdrop-opacity:  ;\n  --tw-backdrop-saturate:  ;\n  --tw-backdrop-sepia:  ;\n}\n\n::backdrop {\n  --tw-border-spacing-x: 0;\n  --tw-border-spacing-y: 0;\n  --tw-translate-x: 0;\n  --tw-translate-y: 0;\n  --tw-rotate: 0;\n  --tw-skew-x: 0;\n  --tw-skew-y: 0;\n  --tw-scale-x: 1;\n  --tw-scale-y: 1;\n  --tw-pan-x:  ;\n  --tw-pan-y:  ;\n  --tw-pinch-zoom:  ;\n  --tw-scroll-snap-strictness: proximity;\n  --tw-ordinal:  ;\n  --tw-slashed-zero:  ;\n  --tw-numeric-figure:  ;\n  --tw-numeric-spacing:  ;\n  --tw-numeric-fraction:  ;\n  --tw-ring-inset:  ;\n  --tw-ring-offset-width: 0px;\n  --tw-ring-offset-color: #fff;\n  --tw-ring-color: rgba(59, 130, 246, 0.5);\n  --tw-ring-offset-shadow: 0 0 rgba(0,0,0,0);\n  --tw-ring-shadow: 0 0 rgba(0,0,0,0);\n  --tw-shadow: 0 0 rgba(0,0,0,0);\n  --tw-shadow-colored: 0 0 rgba(0,0,0,0);\n  --tw-blur:  ;\n  --tw-brightness:  ;\n  --tw-contrast:  ;\n  --tw-grayscale:  ;\n  --tw-hue-rotate:  ;\n  --tw-invert:  ;\n  --tw-saturate:  ;\n  --tw-sepia:  ;\n  --tw-drop-shadow:  ;\n  --tw-backdrop-blur:  ;\n  --tw-backdrop-brightness:  ;\n  --tw-backdrop-contrast:  ;\n  --tw-backdrop-grayscale:  ;\n  --tw-backdrop-hue-rotate:  ;\n  --tw-backdrop-invert:  ;\n  --tw-backdrop-opacity:  ;\n  --tw-backdrop-saturate:  ;\n  --tw-backdrop-sepia:  ;\n}\r\n.absolute {\n  position: absolute;\n}\r\n.relative {\n  position: relative;\n}\r\n.left-4 {\n  left: 1rem;\n}\r\n.top-1\\/2 {\n  top: 50%;\n}\r\n.col-span-2 {\n  grid-column: span 2 / span 2;\n}\r\n.flex {\n  display: flex;\n}\r\n.grid {\n  display: grid;\n}\r\n.h-10 {\n  height: 2.5rem;\n}\r\n.h-20 {\n  height: 5rem;\n}\r\n.h-\\[15\\%\\] {\n  height: 15%;\n}\r\n.h-\\[80\\%\\] {\n  height: 80%;\n}\r\n.h-full {\n  height: 100%;\n}\r\n.w-4 {\n  width: 1rem;\n}\r\n.w-\\[20\\%\\] {\n  width: 20%;\n}\r\n.w-\\[80\\%\\] {\n  width: 80%;\n}\r\n.w-full {\n  width: 100%;\n}\r\n.translate-y-\\[-50\\%\\] {\n  --tw-translate-y: -50%;\n  transform: translate(var(--tw-translate-x), -50%) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}\r\n.select-none {\n  -webkit-user-select: none;\n     -moz-user-select: none;\n          user-select: none;\n}\r\n.resize-none {\n  resize: none;\n}\r\n.grid-cols-4 {\n  grid-template-columns: repeat(4, minmax(0, 1fr));\n}\r\n.grid-rows-2 {\n  grid-template-rows: repeat(2, minmax(0, 1fr));\n}\r\n.flex-row {\n  flex-direction: row;\n}\r\n.flex-col {\n  flex-direction: column;\n}\r\n.items-center {\n  align-items: center;\n}\r\n.justify-start {\n  justify-content: flex-start;\n}\r\n.justify-center {\n  justify-content: center;\n}\r\n.justify-between {\n  justify-content: space-between;\n}\r\n.gap-1 {\n  gap: 0.25rem;\n}\r\n.gap-2 {\n  gap: 0.5rem;\n}\r\n.gap-4 {\n  gap: 1rem;\n}\r\n.overflow-scroll {\n  overflow: scroll;\n}\r\n.rounded {\n  border-radius: 0.25rem;\n}\r\n.rounded-sm {\n  border-radius: 0.125rem;\n}\r\n.bg-gray-600 {\n  --tw-bg-opacity: 1;\n  background-color: rgba(75, 85, 99, 1);\n  background-color: rgb(75 85 99 / var(--tw-bg-opacity));\n}\r\n.bg-gray-700 {\n  --tw-bg-opacity: 1;\n  background-color: rgba(55, 65, 81, 1);\n  background-color: rgb(55 65 81 / var(--tw-bg-opacity));\n}\r\n.bg-gray-800 {\n  --tw-bg-opacity: 1;\n  background-color: rgba(31, 41, 55, 1);\n  background-color: rgb(31 41 55 / var(--tw-bg-opacity));\n}\r\n.p-1 {\n  padding: 0.25rem;\n}\r\n.p-2 {\n  padding: 0.5rem;\n}\r\n.p-4 {\n  padding: 1rem;\n}\r\n.px-4 {\n  padding-left: 1rem;\n  padding-right: 1rem;\n}\r\n.py-2 {\n  padding-top: 0.5rem;\n  padding-bottom: 0.5rem;\n}\r\n.text-xs {\n  font-size: 0.75rem;\n  line-height: 1rem;\n}\r\n.text-gray-100 {\n  --tw-text-opacity: 1;\n  color: rgba(243, 244, 246, 1);\n  color: rgb(243 244 246 / var(--tw-text-opacity));\n}\r\n.text-gray-300 {\n  --tw-text-opacity: 1;\n  color: rgba(209, 213, 219, 1);\n  color: rgb(209 213 219 / var(--tw-text-opacity));\n}\r\n.text-gray-900 {\n  --tw-text-opacity: 1;\n  color: rgba(17, 24, 39, 1);\n  color: rgb(17 24 39 / var(--tw-text-opacity));\n}\r\n.text-white {\n  --tw-text-opacity: 1;\n  color: rgba(255, 255, 255, 1);\n  color: rgb(255 255 255 / var(--tw-text-opacity));\n}\r\n',"",{version:3,sources:["webpack://./template/input.css"],names:[],mappings:"AAAA;;CAAc,CAAd;;;CAAc;;AAAd;;;EAAA,sBAAc,EAAd,MAAc;EAAd,eAAc,EAAd,MAAc;EAAd,mBAAc,EAAd,MAAc;EAAd,qBAAc,EAAd,MAAc;AAAA;;AAAd;;EAAA,gBAAc;AAAA;;AAAd;;;;;;CAAc;;AAAd;EAAA,gBAAc,EAAd,MAAc;EAAd,8BAAc,EAAd,MAAc;EAAd,gBAAc,EAAd,MAAc;EAAd,cAAc;KAAd,WAAc,EAAd,MAAc;EAAd,wRAAc,EAAd,MAAc;EAAd,6BAAc,EAAd,MAAc;AAAA;;AAAd;;;CAAc;;AAAd;EAAA,SAAc,EAAd,MAAc;EAAd,oBAAc,EAAd,MAAc;AAAA;;AAAd;;;;CAAc;;AAAd;EAAA,SAAc,EAAd,MAAc;EAAd,cAAc,EAAd,MAAc;EAAd,qBAAc,EAAd,MAAc;AAAA;;AAAd;;CAAc;;AAAd;EAAA,0BAAc;EAAd,yCAAc;UAAd,iCAAc;AAAA;;AAAd;;CAAc;;AAAd;;;;;;EAAA,kBAAc;EAAd,oBAAc;AAAA;;AAAd;;CAAc;;AAAd;EAAA,cAAc;EAAd,wBAAc;AAAA;;AAAd;;CAAc;;AAAd;;EAAA,mBAAc;AAAA;;AAAd;;;CAAc;;AAAd;;;;EAAA,+GAAc,EAAd,MAAc;EAAd,cAAc,EAAd,MAAc;AAAA;;AAAd;;CAAc;;AAAd;EAAA,cAAc;AAAA;;AAAd;;CAAc;;AAAd;;EAAA,cAAc;EAAd,cAAc;EAAd,kBAAc;EAAd,wBAAc;AAAA;;AAAd;EAAA,eAAc;AAAA;;AAAd;EAAA,WAAc;AAAA;;AAAd;;;;CAAc;;AAAd;EAAA,cAAc,EAAd,MAAc;EAAd,qBAAc,EAAd,MAAc;EAAd,yBAAc,EAAd,MAAc;AAAA;;AAAd;;;;CAAc;;AAAd;;;;;EAAA,oBAAc,EAAd,MAAc;EAAd,eAAc,EAAd,MAAc;EAAd,oBAAc,EAAd,MAAc;EAAd,oBAAc,EAAd,MAAc;EAAd,cAAc,EAAd,MAAc;EAAd,SAAc,EAAd,MAAc;EAAd,UAAc,EAAd,MAAc;AAAA;;AAAd;;CAAc;;AAAd;;EAAA,oBAAc;AAAA;;AAAd;;;CAAc;;AAAd;;;;EAAA,0BAAc,EAAd,MAAc;EAAd,6BAAc,EAAd,MAAc;EAAd,sBAAc,EAAd,MAAc;AAAA;;AAAd;;CAAc;;AAAd;EAAA,aAAc;AAAA;;AAAd;;CAAc;;AAAd;EAAA,gBAAc;AAAA;;AAAd;;CAAc;;AAAd;EAAA,wBAAc;AAAA;;AAAd;;CAAc;;AAAd;;EAAA,YAAc;AAAA;;AAAd;;;CAAc;;AAAd;EAAA,6BAAc,EAAd,MAAc;EAAd,oBAAc,EAAd,MAAc;AAAA;;AAAd;;CAAc;;AAAd;EAAA,wBAAc;AAAA;;AAAd;;;CAAc;;AAAd;EAAA,0BAAc,EAAd,MAAc;EAAd,aAAc,EAAd,MAAc;AAAA;;AAAd;;CAAc;;AAAd;EAAA,kBAAc;AAAA;;AAAd;;CAAc;;AAAd;;;;;;;;;;;;;EAAA,SAAc;AAAA;;AAAd;EAAA,SAAc;EAAd,UAAc;AAAA;;AAAd;EAAA,UAAc;AAAA;;AAAd;;;EAAA,gBAAc;EAAd,SAAc;EAAd,UAAc;AAAA;;AAAd;;CAAc;;AAAd;EAAA,gBAAc;AAAA;;AAAd;;;CAAc;;AAAd;EAAA,UAAc,EAAd,MAAc;EAAd,cAAc,EAAd,MAAc;AAAA;;AAAd;;EAAA,UAAc,EAAd,MAAc;EAAd,cAAc,EAAd,MAAc;AAAA;;AAAd;;CAAc;;AAAd;;EAAA,eAAc;AAAA;;AAAd;;CAAc;AAAd;EAAA,eAAc;AAAA;;AAAd;;;;CAAc;;AAAd;;;;;;;;EAAA,cAAc,EAAd,MAAc;EAAd,sBAAc,EAAd,MAAc;AAAA;;AAAd;;CAAc;;AAAd;;EAAA,eAAc;EAAd,YAAc;AAAA;;AAAd,wEAAc;AAAd;EAAA,aAAc;AAAA;EAAd;IAAA,YAAc;EAAA;;EAAd;IAAA,wBAAc;YAAd,gBAAc;IAAd,QAAc;EAAA;;AAAd;EAAA,wBAAc;EAAd,wBAAc;EAAd,mBAAc;EAAd,mBAAc;EAAd,cAAc;EAAd,cAAc;EAAd,cAAc;EAAd,eAAc;EAAd,eAAc;EAAd,aAAc;EAAd,aAAc;EAAd,kBAAc;EAAd,sCAAc;EAAd,eAAc;EAAd,oBAAc;EAAd,sBAAc;EAAd,uBAAc;EAAd,wBAAc;EAAd,kBAAc;EAAd,2BAAc;EAAd,4BAAc;EAAd,wCAAc;EAAd,0CAAc;EAAd,mCAAc;EAAd,8BAAc;EAAd,sCAAc;EAAd,YAAc;EAAd,kBAAc;EAAd,gBAAc;EAAd,iBAAc;EAAd,kBAAc;EAAd,cAAc;EAAd,gBAAc;EAAd,aAAc;EAAd,mBAAc;EAAd,qBAAc;EAAd,2BAAc;EAAd,yBAAc;EAAd,0BAAc;EAAd,2BAAc;EAAd,uBAAc;EAAd,wBAAc;EAAd,yBAAc;EAAd;AAAc;;AAAd;EAAA,wBAAc;EAAd,wBAAc;EAAd,mBAAc;EAAd,mBAAc;EAAd,cAAc;EAAd,cAAc;EAAd,cAAc;EAAd,eAAc;EAAd,eAAc;EAAd,aAAc;EAAd,aAAc;EAAd,kBAAc;EAAd,sCAAc;EAAd,eAAc;EAAd,oBAAc;EAAd,sBAAc;EAAd,uBAAc;EAAd,wBAAc;EAAd,kBAAc;EAAd,2BAAc;EAAd,4BAAc;EAAd,wCAAc;EAAd,0CAAc;EAAd,mCAAc;EAAd,8BAAc;EAAd,sCAAc;EAAd,YAAc;EAAd,kBAAc;EAAd,gBAAc;EAAd,iBAAc;EAAd,kBAAc;EAAd,cAAc;EAAd,gBAAc;EAAd,aAAc;EAAd,mBAAc;EAAd,qBAAc;EAAd,2BAAc;EAAd,yBAAc;EAAd,0BAAc;EAAd,2BAAc;EAAd,uBAAc;EAAd,wBAAc;EAAd,yBAAc;EAAd;AAAc;AAEd;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,sBAAmB;EAAnB,8KAAmB;EAAnB;AAAmB;AAAnB;EAAA,yBAAmB;KAAnB,sBAAmB;UAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB,qCAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB,qCAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB,qCAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB;AAAmB;AAAnB;EAAA,mBAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB,6BAAmB;EAAnB;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB,6BAAmB;EAAnB;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB,0BAAmB;EAAnB;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB,6BAAmB;EAAnB;AAAmB",sourcesContent:["@tailwind base;\r\n@tailwind components;\r\n@tailwind utilities;\r\n\r\n@layer base {\r\n  html, body, #root {\r\n    height: 100%;\r\n  }\r\n\r\n  ::-webkit-scrollbar {\r\n    appearance: none;\r\n    width: 0;\r\n  }\r\n}\r\n"],sourceRoot:""}]);const l=i},3645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,a,o){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var l=0;l<this.length;l++){var s=this[l][0];null!=s&&(i[s]=!0)}for(var u=0;u<e.length;u++){var c=[].concat(e[u]);r&&i[c[0]]||(void 0!==o&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=o),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),a&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=a):c[4]="".concat(a)),t.push(c))}},t}},7537:e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */");return[t].concat([o]).join("\n")}return[t].join("\n")}},6230:e=>{e.exports="object"==typeof self?self.FormData:window.FormData},7418:e=>{"use strict";var t=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;function a(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,o){for(var i,l,s=a(e),u=1;u<arguments.length;u++){for(var c in i=Object(arguments[u]))n.call(i,c)&&(s[c]=i[c]);if(t){l=t(i);for(var d=0;d<l.length;d++)r.call(i,l[d])&&(s[l[d]]=i[l[d]])}}return s}},4793:function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(a,o){function i(e){try{s(r.next(e))}catch(e){o(e)}}function l(e){try{s(r.throw(e))}catch(e){o(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,l)}s((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.OpenAIApi=t.OpenAIApiFactory=t.OpenAIApiFp=t.OpenAIApiAxiosParamCreator=t.CreateImageRequestResponseFormatEnum=t.CreateImageRequestSizeEnum=void 0;const a=n(9669),o=n(3597),i=n(5198);t.CreateImageRequestSizeEnum={_256x256:"256x256",_512x512:"512x512",_1024x1024:"1024x1024"},t.CreateImageRequestResponseFormatEnum={Url:"url",B64Json:"b64_json"},t.OpenAIApiAxiosParamCreator=function(e){return{cancelFineTune:(t,n={})=>r(this,void 0,void 0,(function*(){o.assertParamExists("cancelFineTune","fineTuneId",t);const r="/fine-tunes/{fine_tune_id}/cancel".replace("{fine_tune_id}",encodeURIComponent(String(t))),a=new URL(r,o.DUMMY_BASE_URL);let i;e&&(i=e.baseOptions);const l=Object.assign(Object.assign({method:"POST"},i),n);o.setSearchParams(a,{});let s=i&&i.headers?i.headers:{};return l.headers=Object.assign(Object.assign(Object.assign({},{}),s),n.headers),{url:o.toPathString(a),options:l}})),createAnswer:(t,n={})=>r(this,void 0,void 0,(function*(){o.assertParamExists("createAnswer","createAnswerRequest",t);const r=new URL("/answers",o.DUMMY_BASE_URL);let a;e&&(a=e.baseOptions);const i=Object.assign(Object.assign({method:"POST"},a),n),l={"Content-Type":"application/json"};o.setSearchParams(r,{});let s=a&&a.headers?a.headers:{};return i.headers=Object.assign(Object.assign(Object.assign({},l),s),n.headers),i.data=o.serializeDataIfNeeded(t,i,e),{url:o.toPathString(r),options:i}})),createClassification:(t,n={})=>r(this,void 0,void 0,(function*(){o.assertParamExists("createClassification","createClassificationRequest",t);const r=new URL("/classifications",o.DUMMY_BASE_URL);let a;e&&(a=e.baseOptions);const i=Object.assign(Object.assign({method:"POST"},a),n),l={"Content-Type":"application/json"};o.setSearchParams(r,{});let s=a&&a.headers?a.headers:{};return i.headers=Object.assign(Object.assign(Object.assign({},l),s),n.headers),i.data=o.serializeDataIfNeeded(t,i,e),{url:o.toPathString(r),options:i}})),createCompletion:(t,n={})=>r(this,void 0,void 0,(function*(){o.assertParamExists("createCompletion","createCompletionRequest",t);const r=new URL("/completions",o.DUMMY_BASE_URL);let a;e&&(a=e.baseOptions);const i=Object.assign(Object.assign({method:"POST"},a),n),l={"Content-Type":"application/json"};o.setSearchParams(r,{});let s=a&&a.headers?a.headers:{};return i.headers=Object.assign(Object.assign(Object.assign({},l),s),n.headers),i.data=o.serializeDataIfNeeded(t,i,e),{url:o.toPathString(r),options:i}})),createEdit:(t,n={})=>r(this,void 0,void 0,(function*(){o.assertParamExists("createEdit","createEditRequest",t);const r=new URL("/edits",o.DUMMY_BASE_URL);let a;e&&(a=e.baseOptions);const i=Object.assign(Object.assign({method:"POST"},a),n),l={"Content-Type":"application/json"};o.setSearchParams(r,{});let s=a&&a.headers?a.headers:{};return i.headers=Object.assign(Object.assign(Object.assign({},l),s),n.headers),i.data=o.serializeDataIfNeeded(t,i,e),{url:o.toPathString(r),options:i}})),createEmbedding:(t,n={})=>r(this,void 0,void 0,(function*(){o.assertParamExists("createEmbedding","createEmbeddingRequest",t);const r=new URL("/embeddings",o.DUMMY_BASE_URL);let a;e&&(a=e.baseOptions);const i=Object.assign(Object.assign({method:"POST"},a),n),l={"Content-Type":"application/json"};o.setSearchParams(r,{});let s=a&&a.headers?a.headers:{};return i.headers=Object.assign(Object.assign(Object.assign({},l),s),n.headers),i.data=o.serializeDataIfNeeded(t,i,e),{url:o.toPathString(r),options:i}})),createFile:(t,n,a={})=>r(this,void 0,void 0,(function*(){o.assertParamExists("createFile","file",t),o.assertParamExists("createFile","purpose",n);const r=new URL("/files",o.DUMMY_BASE_URL);let i;e&&(i=e.baseOptions);const l=Object.assign(Object.assign({method:"POST"},i),a),s={},u=new(e&&e.formDataCtor||FormData);void 0!==t&&u.append("file",t),void 0!==n&&u.append("purpose",n),s["Content-Type"]="multipart/form-data",o.setSearchParams(r,{});let c=i&&i.headers?i.headers:{};return l.headers=Object.assign(Object.assign(Object.assign(Object.assign({},s),u.getHeaders()),c),a.headers),l.data=u,{url:o.toPathString(r),options:l}})),createFineTune:(t,n={})=>r(this,void 0,void 0,(function*(){o.assertParamExists("createFineTune","createFineTuneRequest",t);const r=new URL("/fine-tunes",o.DUMMY_BASE_URL);let a;e&&(a=e.baseOptions);const i=Object.assign(Object.assign({method:"POST"},a),n),l={"Content-Type":"application/json"};o.setSearchParams(r,{});let s=a&&a.headers?a.headers:{};return i.headers=Object.assign(Object.assign(Object.assign({},l),s),n.headers),i.data=o.serializeDataIfNeeded(t,i,e),{url:o.toPathString(r),options:i}})),createImage:(t,n={})=>r(this,void 0,void 0,(function*(){o.assertParamExists("createImage","createImageRequest",t);const r=new URL("/images/generations",o.DUMMY_BASE_URL);let a;e&&(a=e.baseOptions);const i=Object.assign(Object.assign({method:"POST"},a),n),l={"Content-Type":"application/json"};o.setSearchParams(r,{});let s=a&&a.headers?a.headers:{};return i.headers=Object.assign(Object.assign(Object.assign({},l),s),n.headers),i.data=o.serializeDataIfNeeded(t,i,e),{url:o.toPathString(r),options:i}})),createImageEdit:(t,n,a,i,l,s,u,c={})=>r(this,void 0,void 0,(function*(){o.assertParamExists("createImageEdit","image",t),o.assertParamExists("createImageEdit","mask",n),o.assertParamExists("createImageEdit","prompt",a);const r=new URL("/images/edits",o.DUMMY_BASE_URL);let d;e&&(d=e.baseOptions);const f=Object.assign(Object.assign({method:"POST"},d),c),p={},h=new(e&&e.formDataCtor||FormData);void 0!==t&&h.append("image",t),void 0!==n&&h.append("mask",n),void 0!==a&&h.append("prompt",a),void 0!==i&&h.append("n",i),void 0!==l&&h.append("size",l),void 0!==s&&h.append("response_format",s),void 0!==u&&h.append("user",u),p["Content-Type"]="multipart/form-data",o.setSearchParams(r,{});let A=d&&d.headers?d.headers:{};return f.headers=Object.assign(Object.assign(Object.assign(Object.assign({},p),h.getHeaders()),A),c.headers),f.data=h,{url:o.toPathString(r),options:f}})),createImageVariation:(t,n,a,i,l,s={})=>r(this,void 0,void 0,(function*(){o.assertParamExists("createImageVariation","image",t);const r=new URL("/images/variations",o.DUMMY_BASE_URL);let u;e&&(u=e.baseOptions);const c=Object.assign(Object.assign({method:"POST"},u),s),d={},f=new(e&&e.formDataCtor||FormData);void 0!==t&&f.append("image",t),void 0!==n&&f.append("n",n),void 0!==a&&f.append("size",a),void 0!==i&&f.append("response_format",i),void 0!==l&&f.append("user",l),d["Content-Type"]="multipart/form-data",o.setSearchParams(r,{});let p=u&&u.headers?u.headers:{};return c.headers=Object.assign(Object.assign(Object.assign(Object.assign({},d),f.getHeaders()),p),s.headers),c.data=f,{url:o.toPathString(r),options:c}})),createModeration:(t,n={})=>r(this,void 0,void 0,(function*(){o.assertParamExists("createModeration","createModerationRequest",t);const r=new URL("/moderations",o.DUMMY_BASE_URL);let a;e&&(a=e.baseOptions);const i=Object.assign(Object.assign({method:"POST"},a),n),l={"Content-Type":"application/json"};o.setSearchParams(r,{});let s=a&&a.headers?a.headers:{};return i.headers=Object.assign(Object.assign(Object.assign({},l),s),n.headers),i.data=o.serializeDataIfNeeded(t,i,e),{url:o.toPathString(r),options:i}})),createSearch:(t,n,a={})=>r(this,void 0,void 0,(function*(){o.assertParamExists("createSearch","engineId",t),o.assertParamExists("createSearch","createSearchRequest",n);const r="/engines/{engine_id}/search".replace("{engine_id}",encodeURIComponent(String(t))),i=new URL(r,o.DUMMY_BASE_URL);let l;e&&(l=e.baseOptions);const s=Object.assign(Object.assign({method:"POST"},l),a),u={"Content-Type":"application/json"};o.setSearchParams(i,{});let c=l&&l.headers?l.headers:{};return s.headers=Object.assign(Object.assign(Object.assign({},u),c),a.headers),s.data=o.serializeDataIfNeeded(n,s,e),{url:o.toPathString(i),options:s}})),deleteFile:(t,n={})=>r(this,void 0,void 0,(function*(){o.assertParamExists("deleteFile","fileId",t);const r="/files/{file_id}".replace("{file_id}",encodeURIComponent(String(t))),a=new URL(r,o.DUMMY_BASE_URL);let i;e&&(i=e.baseOptions);const l=Object.assign(Object.assign({method:"DELETE"},i),n);o.setSearchParams(a,{});let s=i&&i.headers?i.headers:{};return l.headers=Object.assign(Object.assign(Object.assign({},{}),s),n.headers),{url:o.toPathString(a),options:l}})),deleteModel:(t,n={})=>r(this,void 0,void 0,(function*(){o.assertParamExists("deleteModel","model",t);const r="/models/{model}".replace("{model}",encodeURIComponent(String(t))),a=new URL(r,o.DUMMY_BASE_URL);let i;e&&(i=e.baseOptions);const l=Object.assign(Object.assign({method:"DELETE"},i),n);o.setSearchParams(a,{});let s=i&&i.headers?i.headers:{};return l.headers=Object.assign(Object.assign(Object.assign({},{}),s),n.headers),{url:o.toPathString(a),options:l}})),downloadFile:(t,n={})=>r(this,void 0,void 0,(function*(){o.assertParamExists("downloadFile","fileId",t);const r="/files/{file_id}/content".replace("{file_id}",encodeURIComponent(String(t))),a=new URL(r,o.DUMMY_BASE_URL);let i;e&&(i=e.baseOptions);const l=Object.assign(Object.assign({method:"GET"},i),n);o.setSearchParams(a,{});let s=i&&i.headers?i.headers:{};return l.headers=Object.assign(Object.assign(Object.assign({},{}),s),n.headers),{url:o.toPathString(a),options:l}})),listEngines:(t={})=>r(this,void 0,void 0,(function*(){const n=new URL("/engines",o.DUMMY_BASE_URL);let r;e&&(r=e.baseOptions);const a=Object.assign(Object.assign({method:"GET"},r),t);o.setSearchParams(n,{});let i=r&&r.headers?r.headers:{};return a.headers=Object.assign(Object.assign(Object.assign({},{}),i),t.headers),{url:o.toPathString(n),options:a}})),listFiles:(t={})=>r(this,void 0,void 0,(function*(){const n=new URL("/files",o.DUMMY_BASE_URL);let r;e&&(r=e.baseOptions);const a=Object.assign(Object.assign({method:"GET"},r),t);o.setSearchParams(n,{});let i=r&&r.headers?r.headers:{};return a.headers=Object.assign(Object.assign(Object.assign({},{}),i),t.headers),{url:o.toPathString(n),options:a}})),listFineTuneEvents:(t,n,a={})=>r(this,void 0,void 0,(function*(){o.assertParamExists("listFineTuneEvents","fineTuneId",t);const r="/fine-tunes/{fine_tune_id}/events".replace("{fine_tune_id}",encodeURIComponent(String(t))),i=new URL(r,o.DUMMY_BASE_URL);let l;e&&(l=e.baseOptions);const s=Object.assign(Object.assign({method:"GET"},l),a),u={};void 0!==n&&(u.stream=n),o.setSearchParams(i,u);let c=l&&l.headers?l.headers:{};return s.headers=Object.assign(Object.assign(Object.assign({},{}),c),a.headers),{url:o.toPathString(i),options:s}})),listFineTunes:(t={})=>r(this,void 0,void 0,(function*(){const n=new URL("/fine-tunes",o.DUMMY_BASE_URL);let r;e&&(r=e.baseOptions);const a=Object.assign(Object.assign({method:"GET"},r),t);o.setSearchParams(n,{});let i=r&&r.headers?r.headers:{};return a.headers=Object.assign(Object.assign(Object.assign({},{}),i),t.headers),{url:o.toPathString(n),options:a}})),listModels:(t={})=>r(this,void 0,void 0,(function*(){const n=new URL("/models",o.DUMMY_BASE_URL);let r;e&&(r=e.baseOptions);const a=Object.assign(Object.assign({method:"GET"},r),t);o.setSearchParams(n,{});let i=r&&r.headers?r.headers:{};return a.headers=Object.assign(Object.assign(Object.assign({},{}),i),t.headers),{url:o.toPathString(n),options:a}})),retrieveEngine:(t,n={})=>r(this,void 0,void 0,(function*(){o.assertParamExists("retrieveEngine","engineId",t);const r="/engines/{engine_id}".replace("{engine_id}",encodeURIComponent(String(t))),a=new URL(r,o.DUMMY_BASE_URL);let i;e&&(i=e.baseOptions);const l=Object.assign(Object.assign({method:"GET"},i),n);o.setSearchParams(a,{});let s=i&&i.headers?i.headers:{};return l.headers=Object.assign(Object.assign(Object.assign({},{}),s),n.headers),{url:o.toPathString(a),options:l}})),retrieveFile:(t,n={})=>r(this,void 0,void 0,(function*(){o.assertParamExists("retrieveFile","fileId",t);const r="/files/{file_id}".replace("{file_id}",encodeURIComponent(String(t))),a=new URL(r,o.DUMMY_BASE_URL);let i;e&&(i=e.baseOptions);const l=Object.assign(Object.assign({method:"GET"},i),n);o.setSearchParams(a,{});let s=i&&i.headers?i.headers:{};return l.headers=Object.assign(Object.assign(Object.assign({},{}),s),n.headers),{url:o.toPathString(a),options:l}})),retrieveFineTune:(t,n={})=>r(this,void 0,void 0,(function*(){o.assertParamExists("retrieveFineTune","fineTuneId",t);const r="/fine-tunes/{fine_tune_id}".replace("{fine_tune_id}",encodeURIComponent(String(t))),a=new URL(r,o.DUMMY_BASE_URL);let i;e&&(i=e.baseOptions);const l=Object.assign(Object.assign({method:"GET"},i),n);o.setSearchParams(a,{});let s=i&&i.headers?i.headers:{};return l.headers=Object.assign(Object.assign(Object.assign({},{}),s),n.headers),{url:o.toPathString(a),options:l}})),retrieveModel:(t,n={})=>r(this,void 0,void 0,(function*(){o.assertParamExists("retrieveModel","model",t);const r="/models/{model}".replace("{model}",encodeURIComponent(String(t))),a=new URL(r,o.DUMMY_BASE_URL);let i;e&&(i=e.baseOptions);const l=Object.assign(Object.assign({method:"GET"},i),n);o.setSearchParams(a,{});let s=i&&i.headers?i.headers:{};return l.headers=Object.assign(Object.assign(Object.assign({},{}),s),n.headers),{url:o.toPathString(a),options:l}}))}},t.OpenAIApiFp=function(e){const n=t.OpenAIApiAxiosParamCreator(e);return{cancelFineTune(t,l){return r(this,void 0,void 0,(function*(){const r=yield n.cancelFineTune(t,l);return o.createRequestFunction(r,a.default,i.BASE_PATH,e)}))},createAnswer(t,l){return r(this,void 0,void 0,(function*(){const r=yield n.createAnswer(t,l);return o.createRequestFunction(r,a.default,i.BASE_PATH,e)}))},createClassification(t,l){return r(this,void 0,void 0,(function*(){const r=yield n.createClassification(t,l);return o.createRequestFunction(r,a.default,i.BASE_PATH,e)}))},createCompletion(t,l){return r(this,void 0,void 0,(function*(){const r=yield n.createCompletion(t,l);return o.createRequestFunction(r,a.default,i.BASE_PATH,e)}))},createEdit(t,l){return r(this,void 0,void 0,(function*(){const r=yield n.createEdit(t,l);return o.createRequestFunction(r,a.default,i.BASE_PATH,e)}))},createEmbedding(t,l){return r(this,void 0,void 0,(function*(){const r=yield n.createEmbedding(t,l);return o.createRequestFunction(r,a.default,i.BASE_PATH,e)}))},createFile(t,l,s){return r(this,void 0,void 0,(function*(){const r=yield n.createFile(t,l,s);return o.createRequestFunction(r,a.default,i.BASE_PATH,e)}))},createFineTune(t,l){return r(this,void 0,void 0,(function*(){const r=yield n.createFineTune(t,l);return o.createRequestFunction(r,a.default,i.BASE_PATH,e)}))},createImage(t,l){return r(this,void 0,void 0,(function*(){const r=yield n.createImage(t,l);return o.createRequestFunction(r,a.default,i.BASE_PATH,e)}))},createImageEdit(t,l,s,u,c,d,f,p){return r(this,void 0,void 0,(function*(){const r=yield n.createImageEdit(t,l,s,u,c,d,f,p);return o.createRequestFunction(r,a.default,i.BASE_PATH,e)}))},createImageVariation(t,l,s,u,c,d){return r(this,void 0,void 0,(function*(){const r=yield n.createImageVariation(t,l,s,u,c,d);return o.createRequestFunction(r,a.default,i.BASE_PATH,e)}))},createModeration(t,l){return r(this,void 0,void 0,(function*(){const r=yield n.createModeration(t,l);return o.createRequestFunction(r,a.default,i.BASE_PATH,e)}))},createSearch(t,l,s){return r(this,void 0,void 0,(function*(){const r=yield n.createSearch(t,l,s);return o.createRequestFunction(r,a.default,i.BASE_PATH,e)}))},deleteFile(t,l){return r(this,void 0,void 0,(function*(){const r=yield n.deleteFile(t,l);return o.createRequestFunction(r,a.default,i.BASE_PATH,e)}))},deleteModel(t,l){return r(this,void 0,void 0,(function*(){const r=yield n.deleteModel(t,l);return o.createRequestFunction(r,a.default,i.BASE_PATH,e)}))},downloadFile(t,l){return r(this,void 0,void 0,(function*(){const r=yield n.downloadFile(t,l);return o.createRequestFunction(r,a.default,i.BASE_PATH,e)}))},listEngines(t){return r(this,void 0,void 0,(function*(){const r=yield n.listEngines(t);return o.createRequestFunction(r,a.default,i.BASE_PATH,e)}))},listFiles(t){return r(this,void 0,void 0,(function*(){const r=yield n.listFiles(t);return o.createRequestFunction(r,a.default,i.BASE_PATH,e)}))},listFineTuneEvents(t,l,s){return r(this,void 0,void 0,(function*(){const r=yield n.listFineTuneEvents(t,l,s);return o.createRequestFunction(r,a.default,i.BASE_PATH,e)}))},listFineTunes(t){return r(this,void 0,void 0,(function*(){const r=yield n.listFineTunes(t);return o.createRequestFunction(r,a.default,i.BASE_PATH,e)}))},listModels(t){return r(this,void 0,void 0,(function*(){const r=yield n.listModels(t);return o.createRequestFunction(r,a.default,i.BASE_PATH,e)}))},retrieveEngine(t,l){return r(this,void 0,void 0,(function*(){const r=yield n.retrieveEngine(t,l);return o.createRequestFunction(r,a.default,i.BASE_PATH,e)}))},retrieveFile(t,l){return r(this,void 0,void 0,(function*(){const r=yield n.retrieveFile(t,l);return o.createRequestFunction(r,a.default,i.BASE_PATH,e)}))},retrieveFineTune(t,l){return r(this,void 0,void 0,(function*(){const r=yield n.retrieveFineTune(t,l);return o.createRequestFunction(r,a.default,i.BASE_PATH,e)}))},retrieveModel(t,l){return r(this,void 0,void 0,(function*(){const r=yield n.retrieveModel(t,l);return o.createRequestFunction(r,a.default,i.BASE_PATH,e)}))}}},t.OpenAIApiFactory=function(e,n,r){const a=t.OpenAIApiFp(e);return{cancelFineTune:(e,t)=>a.cancelFineTune(e,t).then((e=>e(r,n))),createAnswer:(e,t)=>a.createAnswer(e,t).then((e=>e(r,n))),createClassification:(e,t)=>a.createClassification(e,t).then((e=>e(r,n))),createCompletion:(e,t)=>a.createCompletion(e,t).then((e=>e(r,n))),createEdit:(e,t)=>a.createEdit(e,t).then((e=>e(r,n))),createEmbedding:(e,t)=>a.createEmbedding(e,t).then((e=>e(r,n))),createFile:(e,t,o)=>a.createFile(e,t,o).then((e=>e(r,n))),createFineTune:(e,t)=>a.createFineTune(e,t).then((e=>e(r,n))),createImage:(e,t)=>a.createImage(e,t).then((e=>e(r,n))),createImageEdit:(e,t,o,i,l,s,u,c)=>a.createImageEdit(e,t,o,i,l,s,u,c).then((e=>e(r,n))),createImageVariation:(e,t,o,i,l,s)=>a.createImageVariation(e,t,o,i,l,s).then((e=>e(r,n))),createModeration:(e,t)=>a.createModeration(e,t).then((e=>e(r,n))),createSearch:(e,t,o)=>a.createSearch(e,t,o).then((e=>e(r,n))),deleteFile:(e,t)=>a.deleteFile(e,t).then((e=>e(r,n))),deleteModel:(e,t)=>a.deleteModel(e,t).then((e=>e(r,n))),downloadFile:(e,t)=>a.downloadFile(e,t).then((e=>e(r,n))),listEngines:e=>a.listEngines(e).then((e=>e(r,n))),listFiles:e=>a.listFiles(e).then((e=>e(r,n))),listFineTuneEvents:(e,t,o)=>a.listFineTuneEvents(e,t,o).then((e=>e(r,n))),listFineTunes:e=>a.listFineTunes(e).then((e=>e(r,n))),listModels:e=>a.listModels(e).then((e=>e(r,n))),retrieveEngine:(e,t)=>a.retrieveEngine(e,t).then((e=>e(r,n))),retrieveFile:(e,t)=>a.retrieveFile(e,t).then((e=>e(r,n))),retrieveFineTune:(e,t)=>a.retrieveFineTune(e,t).then((e=>e(r,n))),retrieveModel:(e,t)=>a.retrieveModel(e,t).then((e=>e(r,n)))}};class l extends i.BaseAPI{cancelFineTune(e,n){return t.OpenAIApiFp(this.configuration).cancelFineTune(e,n).then((e=>e(this.axios,this.basePath)))}createAnswer(e,n){return t.OpenAIApiFp(this.configuration).createAnswer(e,n).then((e=>e(this.axios,this.basePath)))}createClassification(e,n){return t.OpenAIApiFp(this.configuration).createClassification(e,n).then((e=>e(this.axios,this.basePath)))}createCompletion(e,n){return t.OpenAIApiFp(this.configuration).createCompletion(e,n).then((e=>e(this.axios,this.basePath)))}createEdit(e,n){return t.OpenAIApiFp(this.configuration).createEdit(e,n).then((e=>e(this.axios,this.basePath)))}createEmbedding(e,n){return t.OpenAIApiFp(this.configuration).createEmbedding(e,n).then((e=>e(this.axios,this.basePath)))}createFile(e,n,r){return t.OpenAIApiFp(this.configuration).createFile(e,n,r).then((e=>e(this.axios,this.basePath)))}createFineTune(e,n){return t.OpenAIApiFp(this.configuration).createFineTune(e,n).then((e=>e(this.axios,this.basePath)))}createImage(e,n){return t.OpenAIApiFp(this.configuration).createImage(e,n).then((e=>e(this.axios,this.basePath)))}createImageEdit(e,n,r,a,o,i,l,s){return t.OpenAIApiFp(this.configuration).createImageEdit(e,n,r,a,o,i,l,s).then((e=>e(this.axios,this.basePath)))}createImageVariation(e,n,r,a,o,i){return t.OpenAIApiFp(this.configuration).createImageVariation(e,n,r,a,o,i).then((e=>e(this.axios,this.basePath)))}createModeration(e,n){return t.OpenAIApiFp(this.configuration).createModeration(e,n).then((e=>e(this.axios,this.basePath)))}createSearch(e,n,r){return t.OpenAIApiFp(this.configuration).createSearch(e,n,r).then((e=>e(this.axios,this.basePath)))}deleteFile(e,n){return t.OpenAIApiFp(this.configuration).deleteFile(e,n).then((e=>e(this.axios,this.basePath)))}deleteModel(e,n){return t.OpenAIApiFp(this.configuration).deleteModel(e,n).then((e=>e(this.axios,this.basePath)))}downloadFile(e,n){return t.OpenAIApiFp(this.configuration).downloadFile(e,n).then((e=>e(this.axios,this.basePath)))}listEngines(e){return t.OpenAIApiFp(this.configuration).listEngines(e).then((e=>e(this.axios,this.basePath)))}listFiles(e){return t.OpenAIApiFp(this.configuration).listFiles(e).then((e=>e(this.axios,this.basePath)))}listFineTuneEvents(e,n,r){return t.OpenAIApiFp(this.configuration).listFineTuneEvents(e,n,r).then((e=>e(this.axios,this.basePath)))}listFineTunes(e){return t.OpenAIApiFp(this.configuration).listFineTunes(e).then((e=>e(this.axios,this.basePath)))}listModels(e){return t.OpenAIApiFp(this.configuration).listModels(e).then((e=>e(this.axios,this.basePath)))}retrieveEngine(e,n){return t.OpenAIApiFp(this.configuration).retrieveEngine(e,n).then((e=>e(this.axios,this.basePath)))}retrieveFile(e,n){return t.OpenAIApiFp(this.configuration).retrieveFile(e,n).then((e=>e(this.axios,this.basePath)))}retrieveFineTune(e,n){return t.OpenAIApiFp(this.configuration).retrieveFineTune(e,n).then((e=>e(this.axios,this.basePath)))}retrieveModel(e,n){return t.OpenAIApiFp(this.configuration).retrieveModel(e,n).then((e=>e(this.axios,this.basePath)))}}t.OpenAIApi=l},5198:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.RequiredError=t.BaseAPI=t.COLLECTION_FORMATS=t.BASE_PATH=void 0;const r=n(9669);t.BASE_PATH="https://api.openai.com/v1".replace(/\/+$/,""),t.COLLECTION_FORMATS={csv:",",ssv:" ",tsv:"\t",pipes:"|"},t.BaseAPI=class{constructor(e,n=t.BASE_PATH,a=r.default){this.basePath=n,this.axios=a,e&&(this.configuration=e,this.basePath=e.basePath||this.basePath)}};class a extends Error{constructor(e,t){super(t),this.field=e,this.name="RequiredError"}}t.RequiredError=a},3597:function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(a,o){function i(e){try{s(r.next(e))}catch(e){o(e)}}function l(e){try{s(r.throw(e))}catch(e){o(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,l)}s((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.createRequestFunction=t.toPathString=t.serializeDataIfNeeded=t.setSearchParams=t.setOAuthToObject=t.setBearerAuthToObject=t.setBasicAuthToObject=t.setApiKeyToObject=t.assertParamExists=t.DUMMY_BASE_URL=void 0;const a=n(5198);function o(e,t,n=""){"object"==typeof t?Array.isArray(t)?t.forEach((t=>o(e,t,n))):Object.keys(t).forEach((r=>o(e,t[r],`${n}${""!==n?".":""}${r}`))):e.has(n)?e.append(n,t):e.set(n,t)}t.DUMMY_BASE_URL="https://example.com",t.assertParamExists=function(e,t,n){if(null==n)throw new a.RequiredError(t,`Required parameter ${t} was null or undefined when calling ${e}.`)},t.setApiKeyToObject=function(e,t,n){return r(this,void 0,void 0,(function*(){if(n&&n.apiKey){const r="function"==typeof n.apiKey?yield n.apiKey(t):yield n.apiKey;e[t]=r}}))},t.setBasicAuthToObject=function(e,t){t&&(t.username||t.password)&&(e.auth={username:t.username,password:t.password})},t.setBearerAuthToObject=function(e,t){return r(this,void 0,void 0,(function*(){if(t&&t.accessToken){const n="function"==typeof t.accessToken?yield t.accessToken():yield t.accessToken;e.Authorization="Bearer "+n}}))},t.setOAuthToObject=function(e,t,n,a){return r(this,void 0,void 0,(function*(){if(a&&a.accessToken){const r="function"==typeof a.accessToken?yield a.accessToken(t,n):yield a.accessToken;e.Authorization="Bearer "+r}}))},t.setSearchParams=function(e,...t){const n=new URLSearchParams(e.search);o(n,t),e.search=n.toString()},t.serializeDataIfNeeded=function(e,t,n){const r="string"!=typeof e;return(r&&n&&n.isJsonMime?n.isJsonMime(t.headers["Content-Type"]):r)?JSON.stringify(void 0!==e?e:{}):e||""},t.toPathString=function(e){return e.pathname+e.search+e.hash},t.createRequestFunction=function(e,t,n,r){return(a=t,o=n)=>{const i=Object.assign(Object.assign({},e.options),{url:((null==r?void 0:r.basePath)||o)+e.url});return a.request(i)}}},6577:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Configuration=void 0;const r=n(2811);t.Configuration=class{constructor(e={}){this.apiKey=e.apiKey,this.organization=e.organization,this.username=e.username,this.password=e.password,this.accessToken=e.accessToken,this.basePath=e.basePath,this.baseOptions=e.baseOptions,this.formDataCtor=e.formDataCtor,this.baseOptions||(this.baseOptions={}),this.baseOptions.headers=Object.assign({"User-Agent":`OpenAI/NodeJS/${r.version}`,Authorization:`Bearer ${this.apiKey}`},this.baseOptions.headers),this.organization&&(this.baseOptions.headers["OpenAI-Organization"]=this.organization),this.formDataCtor||(this.formDataCtor=n(6230))}isJsonMime(e){const t=new RegExp("^(application/json|[^;/ \t]+/[^;/ \t]+[+]json)[ \t]*(;.*)?$","i");return null!==e&&(t.test(e)||"application/json-patch+json"===e.toLowerCase())}}},6485:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),a=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||t.hasOwnProperty(n)||r(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),a(n(4793),t),a(n(6577),t)},4448:(e,t,n)=>{"use strict";var r=n(7294),a=n(7418),o=n(3840);function i(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(i(227));var l=new Set,s={};function u(e,t){c(e,t),c(e+"Capture",t)}function c(e,t){for(s[e]=t,e=0;e<t.length;e++)l.add(t[e])}var d=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),f=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p=Object.prototype.hasOwnProperty,h={},A={};function m(e,t,n,r,a,o,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=a,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=o,this.removeEmptyString=i}var g={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){g[e]=new m(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];g[t]=new m(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){g[e]=new m(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){g[e]=new m(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){g[e]=new m(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){g[e]=new m(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){g[e]=new m(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){g[e]=new m(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){g[e]=new m(e,5,!1,e.toLowerCase(),null,!1,!1)}));var v=/[\-:]([a-z])/g;function b(e){return e[1].toUpperCase()}function y(e,t,n,r){var a=g.hasOwnProperty(t)?g[t]:null;(null!==a?0===a.type:!r&&2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1]))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,a,r)&&(n=null),r||null===a?function(e){return!!p.call(A,e)||!p.call(h,e)&&(f.test(e)?A[e]=!0:(h[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):a.mustUseProperty?e[a.propertyName]=null===n?3!==a.type&&"":n:(t=a.attributeName,r=a.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(a=a.type)||4===a&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(v,b);g[t]=new m(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(v,b);g[t]=new m(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(v,b);g[t]=new m(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){g[e]=new m(e,1,!1,e.toLowerCase(),null,!1,!1)})),g.xlinkHref=new m("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){g[e]=new m(e,1,!1,e.toLowerCase(),null,!0,!0)}));var E=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,w=60103,k=60106,S=60107,x=60108,O=60114,_=60109,C=60110,P=60112,j=60113,L=60120,B=60115,T=60116,M=60121,R=60128,N=60129,F=60130,I=60131;if("function"==typeof Symbol&&Symbol.for){var z=Symbol.for;w=z("react.element"),k=z("react.portal"),S=z("react.fragment"),x=z("react.strict_mode"),O=z("react.profiler"),_=z("react.provider"),C=z("react.context"),P=z("react.forward_ref"),j=z("react.suspense"),L=z("react.suspense_list"),B=z("react.memo"),T=z("react.lazy"),M=z("react.block"),z("react.scope"),R=z("react.opaque.id"),N=z("react.debug_trace_mode"),F=z("react.offscreen"),I=z("react.legacy_hidden")}var U,D="function"==typeof Symbol&&Symbol.iterator;function V(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=D&&e[D]||e["@@iterator"])?e:null}function W(e){if(void 0===U)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);U=t&&t[1]||""}return"\n"+U+e}var H=!1;function q(e,t){if(!e||H)return"";H=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(e){if(e&&r&&"string"==typeof e.stack){for(var a=e.stack.split("\n"),o=r.stack.split("\n"),i=a.length-1,l=o.length-1;1<=i&&0<=l&&a[i]!==o[l];)l--;for(;1<=i&&0<=l;i--,l--)if(a[i]!==o[l]){if(1!==i||1!==l)do{if(i--,0>--l||a[i]!==o[l])return"\n"+a[i].replace(" at new "," at ")}while(1<=i&&0<=l);break}}}finally{H=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?W(e):""}function $(e){switch(e.tag){case 5:return W(e.type);case 16:return W("Lazy");case 13:return W("Suspense");case 19:return W("SuspenseList");case 0:case 2:case 15:return q(e.type,!1);case 11:return q(e.type.render,!1);case 22:return q(e.type._render,!1);case 1:return q(e.type,!0);default:return""}}function Q(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case S:return"Fragment";case k:return"Portal";case O:return"Profiler";case x:return"StrictMode";case j:return"Suspense";case L:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case C:return(e.displayName||"Context")+".Consumer";case _:return(e._context.displayName||"Context")+".Provider";case P:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case B:return Q(e.type);case M:return Q(e._render);case T:t=e._payload,e=e._init;try{return Q(e(t))}catch(e){}}return null}function Y(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function K(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function G(e){e._valueTracker||(e._valueTracker=function(e){var t=K(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var a=n.get,o=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return a.call(this)},set:function(e){r=""+e,o.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function X(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=K(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function J(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Z(e,t){var n=t.checked;return a({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function ee(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=Y(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function te(e,t){null!=(t=t.checked)&&y(e,"checked",t,!1)}function ne(e,t){te(e,t);var n=Y(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ae(e,t.type,n):t.hasOwnProperty("defaultValue")&&ae(e,t.type,Y(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function re(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ae(e,t,n){"number"===t&&J(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function oe(e,t){return e=a({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function ie(e,t,n,r){if(e=e.options,t){t={};for(var a=0;a<n.length;a++)t["$"+n[a]]=!0;for(n=0;n<e.length;n++)a=t.hasOwnProperty("$"+e[n].value),e[n].selected!==a&&(e[n].selected=a),a&&r&&(e[n].defaultSelected=!0)}else{for(n=""+Y(n),t=null,a=0;a<e.length;a++){if(e[a].value===n)return e[a].selected=!0,void(r&&(e[a].defaultSelected=!0));null!==t||e[a].disabled||(t=e[a])}null!==t&&(t.selected=!0)}}function le(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(i(91));return a({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function se(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(i(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(i(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:Y(n)}}function ue(e,t){var n=Y(t.value),r=Y(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ce(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var de="http://www.w3.org/1999/xhtml";function fe(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function pe(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?fe(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var he,Ae,me=(Ae=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((he=he||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=he.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return Ae(e,t)}))}:Ae);function ge(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var ve={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},be=["Webkit","ms","Moz","O"];function ye(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||ve.hasOwnProperty(e)&&ve[e]?(""+t).trim():t+"px"}function Ee(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),a=ye(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,a):e[n]=a}}Object.keys(ve).forEach((function(e){be.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),ve[t]=ve[e]}))}));var we=a({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ke(e,t){if(t){if(we[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(i(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(i(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(i(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(i(62))}}function Se(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function xe(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Oe=null,_e=null,Ce=null;function Pe(e){if(e=ta(e)){if("function"!=typeof Oe)throw Error(i(280));var t=e.stateNode;t&&(t=ra(t),Oe(e.stateNode,e.type,t))}}function je(e){_e?Ce?Ce.push(e):Ce=[e]:_e=e}function Le(){if(_e){var e=_e,t=Ce;if(Ce=_e=null,Pe(e),t)for(e=0;e<t.length;e++)Pe(t[e])}}function Be(e,t){return e(t)}function Te(e,t,n,r,a){return e(t,n,r,a)}function Me(){}var Re=Be,Ne=!1,Fe=!1;function Ie(){null===_e&&null===Ce||(Me(),Le())}function ze(e,t){var n=e.stateNode;if(null===n)return null;var r=ra(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(i(231,t,typeof n));return n}var Ue=!1;if(d)try{var De={};Object.defineProperty(De,"passive",{get:function(){Ue=!0}}),window.addEventListener("test",De,De),window.removeEventListener("test",De,De)}catch(Ae){Ue=!1}function Ve(e,t,n,r,a,o,i,l,s){var u=Array.prototype.slice.call(arguments,3);try{t.apply(n,u)}catch(e){this.onError(e)}}var We=!1,He=null,qe=!1,$e=null,Qe={onError:function(e){We=!0,He=e}};function Ye(e,t,n,r,a,o,i,l,s){We=!1,He=null,Ve.apply(Qe,arguments)}function Ke(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Ge(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Xe(e){if(Ke(e)!==e)throw Error(i(188))}function Je(e,t){for(var n=e.alternate;null!==t;){if(t===e||t===n)return!0;t=t.return}return!1}var Ze,et,tt,nt,rt=!1,at=[],ot=null,it=null,lt=null,st=new Map,ut=new Map,ct=[],dt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function ft(e,t,n,r,a){return{blockedOn:e,domEventName:t,eventSystemFlags:16|n,nativeEvent:a,targetContainers:[r]}}function pt(e,t){switch(e){case"focusin":case"focusout":ot=null;break;case"dragenter":case"dragleave":it=null;break;case"mouseover":case"mouseout":lt=null;break;case"pointerover":case"pointerout":st.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":ut.delete(t.pointerId)}}function ht(e,t,n,r,a,o){return null===e||e.nativeEvent!==o?(e=ft(t,n,r,a,o),null!==t&&null!==(t=ta(t))&&et(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==a&&-1===t.indexOf(a)&&t.push(a),e)}function At(e){var t=ea(e.target);if(null!==t){var n=Ke(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Ge(n)))return e.blockedOn=t,void nt(e.lanePriority,(function(){o.unstable_runWithPriority(e.priority,(function(){tt(n)}))}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function mt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Xt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=ta(n))&&et(t),e.blockedOn=n,!1;t.shift()}return!0}function gt(e,t,n){mt(e)&&n.delete(t)}function vt(){for(rt=!1;0<at.length;){var e=at[0];if(null!==e.blockedOn){null!==(e=ta(e.blockedOn))&&Ze(e);break}for(var t=e.targetContainers;0<t.length;){var n=Xt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n){e.blockedOn=n;break}t.shift()}null===e.blockedOn&&at.shift()}null!==ot&&mt(ot)&&(ot=null),null!==it&&mt(it)&&(it=null),null!==lt&&mt(lt)&&(lt=null),st.forEach(gt),ut.forEach(gt)}function bt(e,t){e.blockedOn===t&&(e.blockedOn=null,rt||(rt=!0,o.unstable_scheduleCallback(o.unstable_NormalPriority,vt)))}function yt(e){function t(t){return bt(t,e)}if(0<at.length){bt(at[0],e);for(var n=1;n<at.length;n++){var r=at[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==ot&&bt(ot,e),null!==it&&bt(it,e),null!==lt&&bt(lt,e),st.forEach(t),ut.forEach(t),n=0;n<ct.length;n++)(r=ct[n]).blockedOn===e&&(r.blockedOn=null);for(;0<ct.length&&null===(n=ct[0]).blockedOn;)At(n),null===n.blockedOn&&ct.shift()}function Et(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var wt={animationend:Et("Animation","AnimationEnd"),animationiteration:Et("Animation","AnimationIteration"),animationstart:Et("Animation","AnimationStart"),transitionend:Et("Transition","TransitionEnd")},kt={},St={};function xt(e){if(kt[e])return kt[e];if(!wt[e])return e;var t,n=wt[e];for(t in n)if(n.hasOwnProperty(t)&&t in St)return kt[e]=n[t];return e}d&&(St=document.createElement("div").style,"AnimationEvent"in window||(delete wt.animationend.animation,delete wt.animationiteration.animation,delete wt.animationstart.animation),"TransitionEvent"in window||delete wt.transitionend.transition);var Ot=xt("animationend"),_t=xt("animationiteration"),Ct=xt("animationstart"),Pt=xt("transitionend"),jt=new Map,Lt=new Map,Bt=["abort","abort",Ot,"animationEnd",_t,"animationIteration",Ct,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Pt,"transitionEnd","waiting","waiting"];function Tt(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],a=e[n+1];a="on"+(a[0].toUpperCase()+a.slice(1)),Lt.set(r,t),jt.set(r,a),u(a,[r])}}(0,o.unstable_now)();var Mt=8;function Rt(e){if(0!=(1&e))return Mt=15,1;if(0!=(2&e))return Mt=14,2;if(0!=(4&e))return Mt=13,4;var t=24&e;return 0!==t?(Mt=12,t):0!=(32&e)?(Mt=11,32):0!=(t=192&e)?(Mt=10,t):0!=(256&e)?(Mt=9,256):0!=(t=3584&e)?(Mt=8,t):0!=(4096&e)?(Mt=7,4096):0!=(t=4186112&e)?(Mt=6,t):0!=(t=62914560&e)?(Mt=5,t):67108864&e?(Mt=4,67108864):0!=(134217728&e)?(Mt=3,134217728):0!=(t=805306368&e)?(Mt=2,t):0!=(1073741824&e)?(Mt=1,1073741824):(Mt=8,e)}function Nt(e,t){var n=e.pendingLanes;if(0===n)return Mt=0;var r=0,a=0,o=e.expiredLanes,i=e.suspendedLanes,l=e.pingedLanes;if(0!==o)r=o,a=Mt=15;else if(0!=(o=134217727&n)){var s=o&~i;0!==s?(r=Rt(s),a=Mt):0!=(l&=o)&&(r=Rt(l),a=Mt)}else 0!=(o=n&~i)?(r=Rt(o),a=Mt):0!==l&&(r=Rt(l),a=Mt);if(0===r)return 0;if(r=n&((0>(r=31-Vt(r))?0:1<<r)<<1)-1,0!==t&&t!==r&&0==(t&i)){if(Rt(t),a<=Mt)return t;Mt=a}if(0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)a=1<<(n=31-Vt(t)),r|=e[n],t&=~a;return r}function Ft(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function It(e,t){switch(e){case 15:return 1;case 14:return 2;case 12:return 0===(e=zt(24&~t))?It(10,t):e;case 10:return 0===(e=zt(192&~t))?It(8,t):e;case 8:return 0===(e=zt(3584&~t))&&0===(e=zt(4186112&~t))&&(e=512),e;case 2:return 0===(t=zt(805306368&~t))&&(t=268435456),t}throw Error(i(358,e))}function zt(e){return e&-e}function Ut(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Dt(e,t,n){e.pendingLanes|=t;var r=t-1;e.suspendedLanes&=r,e.pingedLanes&=r,(e=e.eventTimes)[t=31-Vt(t)]=n}var Vt=Math.clz32?Math.clz32:function(e){return 0===e?32:31-(Wt(e)/Ht|0)|0},Wt=Math.log,Ht=Math.LN2,qt=o.unstable_UserBlockingPriority,$t=o.unstable_runWithPriority,Qt=!0;function Yt(e,t,n,r){Ne||Me();var a=Gt,o=Ne;Ne=!0;try{Te(a,e,t,n,r)}finally{(Ne=o)||Ie()}}function Kt(e,t,n,r){$t(qt,Gt.bind(null,e,t,n,r))}function Gt(e,t,n,r){var a;if(Qt)if((a=0==(4&t))&&0<at.length&&-1<dt.indexOf(e))e=ft(null,e,t,n,r),at.push(e);else{var o=Xt(e,t,n,r);if(null===o)a&&pt(e,r);else{if(a){if(-1<dt.indexOf(e))return e=ft(o,e,t,n,r),void at.push(e);if(function(e,t,n,r,a){switch(t){case"focusin":return ot=ht(ot,e,t,n,r,a),!0;case"dragenter":return it=ht(it,e,t,n,r,a),!0;case"mouseover":return lt=ht(lt,e,t,n,r,a),!0;case"pointerover":var o=a.pointerId;return st.set(o,ht(st.get(o)||null,e,t,n,r,a)),!0;case"gotpointercapture":return o=a.pointerId,ut.set(o,ht(ut.get(o)||null,e,t,n,r,a)),!0}return!1}(o,e,t,n,r))return;pt(e,r)}Tr(e,t,r,null,n)}}}function Xt(e,t,n,r){var a=xe(r);if(null!==(a=ea(a))){var o=Ke(a);if(null===o)a=null;else{var i=o.tag;if(13===i){if(null!==(a=Ge(o)))return a;a=null}else if(3===i){if(o.stateNode.hydrate)return 3===o.tag?o.stateNode.containerInfo:null;a=null}else o!==a&&(a=null)}}return Tr(e,t,r,a,n),null}var Jt=null,Zt=null,en=null;function tn(){if(en)return en;var e,t,n=Zt,r=n.length,a="value"in Jt?Jt.value:Jt.textContent,o=a.length;for(e=0;e<r&&n[e]===a[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===a[o-t];t++);return en=a.slice(e,1<t?1-t:void 0)}function nn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function rn(){return!0}function an(){return!1}function on(e){function t(t,n,r,a,o){for(var i in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=a,this.target=o,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(a):a[i]);return this.isDefaultPrevented=(null!=a.defaultPrevented?a.defaultPrevented:!1===a.returnValue)?rn:an,this.isPropagationStopped=an,this}return a(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=rn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=rn)},persist:function(){},isPersistent:rn}),t}var ln,sn,un,cn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},dn=on(cn),fn=a({},cn,{view:0,detail:0}),pn=on(fn),hn=a({},fn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:On,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==un&&(un&&"mousemove"===e.type?(ln=e.screenX-un.screenX,sn=e.screenY-un.screenY):sn=ln=0,un=e),ln)},movementY:function(e){return"movementY"in e?e.movementY:sn}}),An=on(hn),mn=on(a({},hn,{dataTransfer:0})),gn=on(a({},fn,{relatedTarget:0})),vn=on(a({},cn,{animationName:0,elapsedTime:0,pseudoElement:0})),bn=a({},cn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),yn=on(bn),En=on(a({},cn,{data:0})),wn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},kn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Sn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function xn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Sn[e])&&!!t[e]}function On(){return xn}var _n=a({},fn,{key:function(e){if(e.key){var t=wn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=nn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?kn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:On,charCode:function(e){return"keypress"===e.type?nn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?nn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Cn=on(_n),Pn=on(a({},hn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),jn=on(a({},fn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:On})),Ln=on(a({},cn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Bn=a({},hn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Tn=on(Bn),Mn=[9,13,27,32],Rn=d&&"CompositionEvent"in window,Nn=null;d&&"documentMode"in document&&(Nn=document.documentMode);var Fn=d&&"TextEvent"in window&&!Nn,In=d&&(!Rn||Nn&&8<Nn&&11>=Nn),zn=String.fromCharCode(32),Un=!1;function Dn(e,t){switch(e){case"keyup":return-1!==Mn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Vn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Wn=!1,Hn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function qn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Hn[e.type]:"textarea"===t}function $n(e,t,n,r){je(r),0<(t=Rr(t,"onChange")).length&&(n=new dn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Qn=null,Yn=null;function Kn(e){_r(e,0)}function Gn(e){if(X(na(e)))return e}function Xn(e,t){if("change"===e)return t}var Jn=!1;if(d){var Zn;if(d){var er="oninput"in document;if(!er){var tr=document.createElement("div");tr.setAttribute("oninput","return;"),er="function"==typeof tr.oninput}Zn=er}else Zn=!1;Jn=Zn&&(!document.documentMode||9<document.documentMode)}function nr(){Qn&&(Qn.detachEvent("onpropertychange",rr),Yn=Qn=null)}function rr(e){if("value"===e.propertyName&&Gn(Yn)){var t=[];if($n(t,Yn,e,xe(e)),e=Kn,Ne)e(t);else{Ne=!0;try{Be(e,t)}finally{Ne=!1,Ie()}}}}function ar(e,t,n){"focusin"===e?(nr(),Yn=n,(Qn=t).attachEvent("onpropertychange",rr)):"focusout"===e&&nr()}function or(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Gn(Yn)}function ir(e,t){if("click"===e)return Gn(t)}function lr(e,t){if("input"===e||"change"===e)return Gn(t)}var sr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},ur=Object.prototype.hasOwnProperty;function cr(e,t){if(sr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!ur.call(t,n[r])||!sr(e[n[r]],t[n[r]]))return!1;return!0}function dr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function fr(e,t){var n,r=dr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=dr(r)}}function pr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?pr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function hr(){for(var e=window,t=J();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=J((e=t.contentWindow).document)}return t}function Ar(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var mr=d&&"documentMode"in document&&11>=document.documentMode,gr=null,vr=null,br=null,yr=!1;function Er(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;yr||null==gr||gr!==J(r)||(r="selectionStart"in(r=gr)&&Ar(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},br&&cr(br,r)||(br=r,0<(r=Rr(vr,"onSelect")).length&&(t=new dn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=gr)))}Tt("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),Tt("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),Tt(Bt,2);for(var wr="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),kr=0;kr<wr.length;kr++)Lt.set(wr[kr],0);c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),u("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),u("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),u("onBeforeInput",["compositionend","keypress","textInput","paste"]),u("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Sr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),xr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Sr));function Or(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,a,o,l,s,u){if(Ye.apply(this,arguments),We){if(!We)throw Error(i(198));var c=He;We=!1,He=null,qe||(qe=!0,$e=c)}}(r,t,void 0,e),e.currentTarget=null}function _r(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],a=r.event;r=r.listeners;e:{var o=void 0;if(t)for(var i=r.length-1;0<=i;i--){var l=r[i],s=l.instance,u=l.currentTarget;if(l=l.listener,s!==o&&a.isPropagationStopped())break e;Or(a,l,u),o=s}else for(i=0;i<r.length;i++){if(s=(l=r[i]).instance,u=l.currentTarget,l=l.listener,s!==o&&a.isPropagationStopped())break e;Or(a,l,u),o=s}}}if(qe)throw e=$e,qe=!1,$e=null,e}function Cr(e,t){var n=aa(t),r=e+"__bubble";n.has(r)||(Br(t,e,2,!1),n.add(r))}var Pr="_reactListening"+Math.random().toString(36).slice(2);function jr(e){e[Pr]||(e[Pr]=!0,l.forEach((function(t){xr.has(t)||Lr(t,!1,e,null),Lr(t,!0,e,null)})))}function Lr(e,t,n,r){var a=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,o=n;if("selectionchange"===e&&9!==n.nodeType&&(o=n.ownerDocument),null!==r&&!t&&xr.has(e)){if("scroll"!==e)return;a|=2,o=r}var i=aa(o),l=e+"__"+(t?"capture":"bubble");i.has(l)||(t&&(a|=4),Br(o,e,a,t),i.add(l))}function Br(e,t,n,r){var a=Lt.get(t);switch(void 0===a?2:a){case 0:a=Yt;break;case 1:a=Kt;break;default:a=Gt}n=a.bind(null,t,n,e),a=void 0,!Ue||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(a=!0),r?void 0!==a?e.addEventListener(t,n,{capture:!0,passive:a}):e.addEventListener(t,n,!0):void 0!==a?e.addEventListener(t,n,{passive:a}):e.addEventListener(t,n,!1)}function Tr(e,t,n,r,a){var o=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var i=r.tag;if(3===i||4===i){var l=r.stateNode.containerInfo;if(l===a||8===l.nodeType&&l.parentNode===a)break;if(4===i)for(i=r.return;null!==i;){var s=i.tag;if((3===s||4===s)&&((s=i.stateNode.containerInfo)===a||8===s.nodeType&&s.parentNode===a))return;i=i.return}for(;null!==l;){if(null===(i=ea(l)))return;if(5===(s=i.tag)||6===s){r=o=i;continue e}l=l.parentNode}}r=r.return}!function(e,t,n){if(Fe)return e();Fe=!0;try{Re(e,t,n)}finally{Fe=!1,Ie()}}((function(){var r=o,a=xe(n),i=[];e:{var l=jt.get(e);if(void 0!==l){var s=dn,u=e;switch(e){case"keypress":if(0===nn(n))break e;case"keydown":case"keyup":s=Cn;break;case"focusin":u="focus",s=gn;break;case"focusout":u="blur",s=gn;break;case"beforeblur":case"afterblur":s=gn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":s=An;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":s=mn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":s=jn;break;case Ot:case _t:case Ct:s=vn;break;case Pt:s=Ln;break;case"scroll":s=pn;break;case"wheel":s=Tn;break;case"copy":case"cut":case"paste":s=yn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":s=Pn}var c=0!=(4&t),d=!c&&"scroll"===e,f=c?null!==l?l+"Capture":null:l;c=[];for(var p,h=r;null!==h;){var A=(p=h).stateNode;if(5===p.tag&&null!==A&&(p=A,null!==f&&null!=(A=ze(h,f))&&c.push(Mr(h,A,p))),d)break;h=h.return}0<c.length&&(l=new s(l,u,null,n,a),i.push({event:l,listeners:c}))}}if(0==(7&t)){if(s="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||0!=(16&t)||!(u=n.relatedTarget||n.fromElement)||!ea(u)&&!u[Jr])&&(s||l)&&(l=a.window===a?a:(l=a.ownerDocument)?l.defaultView||l.parentWindow:window,s?(s=r,null!==(u=(u=n.relatedTarget||n.toElement)?ea(u):null)&&(u!==(d=Ke(u))||5!==u.tag&&6!==u.tag)&&(u=null)):(s=null,u=r),s!==u)){if(c=An,A="onMouseLeave",f="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=Pn,A="onPointerLeave",f="onPointerEnter",h="pointer"),d=null==s?l:na(s),p=null==u?l:na(u),(l=new c(A,h+"leave",s,n,a)).target=d,l.relatedTarget=p,A=null,ea(a)===r&&((c=new c(f,h+"enter",u,n,a)).target=p,c.relatedTarget=d,A=c),d=A,s&&u)e:{for(f=u,h=0,p=c=s;p;p=Nr(p))h++;for(p=0,A=f;A;A=Nr(A))p++;for(;0<h-p;)c=Nr(c),h--;for(;0<p-h;)f=Nr(f),p--;for(;h--;){if(c===f||null!==f&&c===f.alternate)break e;c=Nr(c),f=Nr(f)}c=null}else c=null;null!==s&&Fr(i,l,s,c,!1),null!==u&&null!==d&&Fr(i,d,u,c,!0)}if("select"===(s=(l=r?na(r):window).nodeName&&l.nodeName.toLowerCase())||"input"===s&&"file"===l.type)var m=Xn;else if(qn(l))if(Jn)m=lr;else{m=or;var g=ar}else(s=l.nodeName)&&"input"===s.toLowerCase()&&("checkbox"===l.type||"radio"===l.type)&&(m=ir);switch(m&&(m=m(e,r))?$n(i,m,n,a):(g&&g(e,l,r),"focusout"===e&&(g=l._wrapperState)&&g.controlled&&"number"===l.type&&ae(l,"number",l.value)),g=r?na(r):window,e){case"focusin":(qn(g)||"true"===g.contentEditable)&&(gr=g,vr=r,br=null);break;case"focusout":br=vr=gr=null;break;case"mousedown":yr=!0;break;case"contextmenu":case"mouseup":case"dragend":yr=!1,Er(i,n,a);break;case"selectionchange":if(mr)break;case"keydown":case"keyup":Er(i,n,a)}var v;if(Rn)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Wn?Dn(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(In&&"ko"!==n.locale&&(Wn||"onCompositionStart"!==b?"onCompositionEnd"===b&&Wn&&(v=tn()):(Zt="value"in(Jt=a)?Jt.value:Jt.textContent,Wn=!0)),0<(g=Rr(r,b)).length&&(b=new En(b,e,null,n,a),i.push({event:b,listeners:g}),(v||null!==(v=Vn(n)))&&(b.data=v))),(v=Fn?function(e,t){switch(e){case"compositionend":return Vn(t);case"keypress":return 32!==t.which?null:(Un=!0,zn);case"textInput":return(e=t.data)===zn&&Un?null:e;default:return null}}(e,n):function(e,t){if(Wn)return"compositionend"===e||!Rn&&Dn(e,t)?(e=tn(),en=Zt=Jt=null,Wn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return In&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=Rr(r,"onBeforeInput")).length&&(a=new En("onBeforeInput","beforeinput",null,n,a),i.push({event:a,listeners:r}),a.data=v)}_r(i,t)}))}function Mr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Rr(e,t){for(var n=t+"Capture",r=[];null!==e;){var a=e,o=a.stateNode;5===a.tag&&null!==o&&(a=o,null!=(o=ze(e,n))&&r.unshift(Mr(e,o,a)),null!=(o=ze(e,t))&&r.push(Mr(e,o,a))),e=e.return}return r}function Nr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Fr(e,t,n,r,a){for(var o=t._reactName,i=[];null!==n&&n!==r;){var l=n,s=l.alternate,u=l.stateNode;if(null!==s&&s===r)break;5===l.tag&&null!==u&&(l=u,a?null!=(s=ze(n,o))&&i.unshift(Mr(n,s,l)):a||null!=(s=ze(n,o))&&i.push(Mr(n,s,l))),n=n.return}0!==i.length&&e.push({event:t,listeners:i})}function Ir(){}var zr=null,Ur=null;function Dr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function Vr(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var Wr="function"==typeof setTimeout?setTimeout:void 0,Hr="function"==typeof clearTimeout?clearTimeout:void 0;function qr(e){(1===e.nodeType||9===e.nodeType&&null!=(e=e.body))&&(e.textContent="")}function $r(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function Qr(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var Yr=0,Kr=Math.random().toString(36).slice(2),Gr="__reactFiber$"+Kr,Xr="__reactProps$"+Kr,Jr="__reactContainer$"+Kr,Zr="__reactEvents$"+Kr;function ea(e){var t=e[Gr];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Jr]||n[Gr]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=Qr(e);null!==e;){if(n=e[Gr])return n;e=Qr(e)}return t}n=(e=n).parentNode}return null}function ta(e){return!(e=e[Gr]||e[Jr])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function na(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(i(33))}function ra(e){return e[Xr]||null}function aa(e){var t=e[Zr];return void 0===t&&(t=e[Zr]=new Set),t}var oa=[],ia=-1;function la(e){return{current:e}}function sa(e){0>ia||(e.current=oa[ia],oa[ia]=null,ia--)}function ua(e,t){ia++,oa[ia]=e.current,e.current=t}var ca={},da=la(ca),fa=la(!1),pa=ca;function ha(e,t){var n=e.type.contextTypes;if(!n)return ca;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var a,o={};for(a in n)o[a]=t[a];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=o),o}function Aa(e){return null!=e.childContextTypes}function ma(){sa(fa),sa(da)}function ga(e,t,n){if(da.current!==ca)throw Error(i(168));ua(da,t),ua(fa,n)}function va(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var o in r=r.getChildContext())if(!(o in e))throw Error(i(108,Q(t)||"Unknown",o));return a({},n,r)}function ba(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||ca,pa=da.current,ua(da,e),ua(fa,fa.current),!0}function ya(e,t,n){var r=e.stateNode;if(!r)throw Error(i(169));n?(e=va(e,t,pa),r.__reactInternalMemoizedMergedChildContext=e,sa(fa),sa(da),ua(da,e)):sa(fa),ua(fa,n)}var Ea=null,wa=null,ka=o.unstable_runWithPriority,Sa=o.unstable_scheduleCallback,xa=o.unstable_cancelCallback,Oa=o.unstable_shouldYield,_a=o.unstable_requestPaint,Ca=o.unstable_now,Pa=o.unstable_getCurrentPriorityLevel,ja=o.unstable_ImmediatePriority,La=o.unstable_UserBlockingPriority,Ba=o.unstable_NormalPriority,Ta=o.unstable_LowPriority,Ma=o.unstable_IdlePriority,Ra={},Na=void 0!==_a?_a:function(){},Fa=null,Ia=null,za=!1,Ua=Ca(),Da=1e4>Ua?Ca:function(){return Ca()-Ua};function Va(){switch(Pa()){case ja:return 99;case La:return 98;case Ba:return 97;case Ta:return 96;case Ma:return 95;default:throw Error(i(332))}}function Wa(e){switch(e){case 99:return ja;case 98:return La;case 97:return Ba;case 96:return Ta;case 95:return Ma;default:throw Error(i(332))}}function Ha(e,t){return e=Wa(e),ka(e,t)}function qa(e,t,n){return e=Wa(e),Sa(e,t,n)}function $a(){if(null!==Ia){var e=Ia;Ia=null,xa(e)}Qa()}function Qa(){if(!za&&null!==Fa){za=!0;var e=0;try{var t=Fa;Ha(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Fa=null}catch(t){throw null!==Fa&&(Fa=Fa.slice(e+1)),Sa(ja,$a),t}finally{za=!1}}}var Ya=E.ReactCurrentBatchConfig;function Ka(e,t){if(e&&e.defaultProps){for(var n in t=a({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var Ga=la(null),Xa=null,Ja=null,Za=null;function eo(){Za=Ja=Xa=null}function to(e){var t=Ga.current;sa(Ga),e.type._context._currentValue=t}function no(e,t){for(;null!==e;){var n=e.alternate;if((e.childLanes&t)===t){if(null===n||(n.childLanes&t)===t)break;n.childLanes|=t}else e.childLanes|=t,null!==n&&(n.childLanes|=t);e=e.return}}function ro(e,t){Xa=e,Za=Ja=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(Ri=!0),e.firstContext=null)}function ao(e,t){if(Za!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(Za=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Ja){if(null===Xa)throw Error(i(308));Ja=t,Xa.dependencies={lanes:0,firstContext:t,responders:null}}else Ja=Ja.next=t;return e._currentValue}var oo=!1;function io(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function lo(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function so(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function uo(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function co(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var a=null,o=null;if(null!==(n=n.firstBaseUpdate)){do{var i={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===o?a=o=i:o=o.next=i,n=n.next}while(null!==n);null===o?a=o=t:o=o.next=t}else a=o=t;return n={baseState:r.baseState,firstBaseUpdate:a,lastBaseUpdate:o,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function fo(e,t,n,r){var o=e.updateQueue;oo=!1;var i=o.firstBaseUpdate,l=o.lastBaseUpdate,s=o.shared.pending;if(null!==s){o.shared.pending=null;var u=s,c=u.next;u.next=null,null===l?i=c:l.next=c,l=u;var d=e.alternate;if(null!==d){var f=(d=d.updateQueue).lastBaseUpdate;f!==l&&(null===f?d.firstBaseUpdate=c:f.next=c,d.lastBaseUpdate=u)}}if(null!==i){for(f=o.baseState,l=0,d=c=u=null;;){s=i.lane;var p=i.eventTime;if((r&s)===s){null!==d&&(d=d.next={eventTime:p,lane:0,tag:i.tag,payload:i.payload,callback:i.callback,next:null});e:{var h=e,A=i;switch(s=t,p=n,A.tag){case 1:if("function"==typeof(h=A.payload)){f=h.call(p,f,s);break e}f=h;break e;case 3:h.flags=-4097&h.flags|64;case 0:if(null==(s="function"==typeof(h=A.payload)?h.call(p,f,s):h))break e;f=a({},f,s);break e;case 2:oo=!0}}null!==i.callback&&(e.flags|=32,null===(s=o.effects)?o.effects=[i]:s.push(i))}else p={eventTime:p,lane:s,tag:i.tag,payload:i.payload,callback:i.callback,next:null},null===d?(c=d=p,u=f):d=d.next=p,l|=s;if(null===(i=i.next)){if(null===(s=o.shared.pending))break;i=s.next,s.next=null,o.lastBaseUpdate=s,o.shared.pending=null}}null===d&&(u=f),o.baseState=u,o.firstBaseUpdate=c,o.lastBaseUpdate=d,Fl|=l,e.lanes=l,e.memoizedState=f}}function po(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],a=r.callback;if(null!==a){if(r.callback=null,r=n,"function"!=typeof a)throw Error(i(191,a));a.call(r)}}}var ho=(new r.Component).refs;function Ao(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:a({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var mo={isMounted:function(e){return!!(e=e._reactInternals)&&Ke(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=ss(),a=us(e),o=so(r,a);o.payload=t,null!=n&&(o.callback=n),uo(e,o),cs(e,a,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=ss(),a=us(e),o=so(r,a);o.tag=1,o.payload=t,null!=n&&(o.callback=n),uo(e,o),cs(e,a,r)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=ss(),r=us(e),a=so(n,r);a.tag=2,null!=t&&(a.callback=t),uo(e,a),cs(e,r,n)}};function go(e,t,n,r,a,o,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,o,i):!(t.prototype&&t.prototype.isPureReactComponent&&cr(n,r)&&cr(a,o))}function vo(e,t,n){var r=!1,a=ca,o=t.contextType;return"object"==typeof o&&null!==o?o=ao(o):(a=Aa(t)?pa:da.current,o=(r=null!=(r=t.contextTypes))?ha(e,a):ca),t=new t(n,o),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=mo,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=a,e.__reactInternalMemoizedMaskedChildContext=o),t}function bo(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&mo.enqueueReplaceState(t,t.state,null)}function yo(e,t,n,r){var a=e.stateNode;a.props=n,a.state=e.memoizedState,a.refs=ho,io(e);var o=t.contextType;"object"==typeof o&&null!==o?a.context=ao(o):(o=Aa(t)?pa:da.current,a.context=ha(e,o)),fo(e,n,a,r),a.state=e.memoizedState,"function"==typeof(o=t.getDerivedStateFromProps)&&(Ao(e,t,o,n),a.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||(t=a.state,"function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount(),t!==a.state&&mo.enqueueReplaceState(a,a.state,null),fo(e,n,a,r),a.state=e.memoizedState),"function"==typeof a.componentDidMount&&(e.flags|=4)}var Eo=Array.isArray;function wo(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(i(309));var r=n.stateNode}if(!r)throw Error(i(147,e));var a=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===a?t.ref:(t=function(e){var t=r.refs;t===ho&&(t=r.refs={}),null===e?delete t[a]:t[a]=e},t._stringRef=a,t)}if("string"!=typeof e)throw Error(i(284));if(!n._owner)throw Error(i(290,e))}return e}function ko(e,t){if("textarea"!==e.type)throw Error(i(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t))}function So(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.flags=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function a(e,t){return(e=Us(e,t)).index=0,e.sibling=null,e}function o(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags=2,n):r:(t.flags=2,n):n}function l(t){return e&&null===t.alternate&&(t.flags=2),t}function s(e,t,n,r){return null===t||6!==t.tag?((t=Hs(n,e.mode,r)).return=e,t):((t=a(t,n)).return=e,t)}function u(e,t,n,r){return null!==t&&t.elementType===n.type?((r=a(t,n.props)).ref=wo(e,t,n),r.return=e,r):((r=Ds(n.type,n.key,n.props,null,e.mode,r)).ref=wo(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=qs(n,e.mode,r)).return=e,t):((t=a(t,n.children||[])).return=e,t)}function d(e,t,n,r,o){return null===t||7!==t.tag?((t=Vs(n,e.mode,r,o)).return=e,t):((t=a(t,n)).return=e,t)}function f(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Hs(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case w:return(n=Ds(t.type,t.key,t.props,null,e.mode,n)).ref=wo(e,null,t),n.return=e,n;case k:return(t=qs(t,e.mode,n)).return=e,t}if(Eo(t)||V(t))return(t=Vs(t,e.mode,n,null)).return=e,t;ko(e,t)}return null}function p(e,t,n,r){var a=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==a?null:s(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case w:return n.key===a?n.type===S?d(e,t,n.props.children,r,a):u(e,t,n,r):null;case k:return n.key===a?c(e,t,n,r):null}if(Eo(n)||V(n))return null!==a?null:d(e,t,n,r,null);ko(e,n)}return null}function h(e,t,n,r,a){if("string"==typeof r||"number"==typeof r)return s(t,e=e.get(n)||null,""+r,a);if("object"==typeof r&&null!==r){switch(r.$$typeof){case w:return e=e.get(null===r.key?n:r.key)||null,r.type===S?d(t,e,r.props.children,a,r.key):u(t,e,r,a);case k:return c(t,e=e.get(null===r.key?n:r.key)||null,r,a)}if(Eo(r)||V(r))return d(t,e=e.get(n)||null,r,a,null);ko(t,r)}return null}function A(a,i,l,s){for(var u=null,c=null,d=i,A=i=0,m=null;null!==d&&A<l.length;A++){d.index>A?(m=d,d=null):m=d.sibling;var g=p(a,d,l[A],s);if(null===g){null===d&&(d=m);break}e&&d&&null===g.alternate&&t(a,d),i=o(g,i,A),null===c?u=g:c.sibling=g,c=g,d=m}if(A===l.length)return n(a,d),u;if(null===d){for(;A<l.length;A++)null!==(d=f(a,l[A],s))&&(i=o(d,i,A),null===c?u=d:c.sibling=d,c=d);return u}for(d=r(a,d);A<l.length;A++)null!==(m=h(d,a,A,l[A],s))&&(e&&null!==m.alternate&&d.delete(null===m.key?A:m.key),i=o(m,i,A),null===c?u=m:c.sibling=m,c=m);return e&&d.forEach((function(e){return t(a,e)})),u}function m(a,l,s,u){var c=V(s);if("function"!=typeof c)throw Error(i(150));if(null==(s=c.call(s)))throw Error(i(151));for(var d=c=null,A=l,m=l=0,g=null,v=s.next();null!==A&&!v.done;m++,v=s.next()){A.index>m?(g=A,A=null):g=A.sibling;var b=p(a,A,v.value,u);if(null===b){null===A&&(A=g);break}e&&A&&null===b.alternate&&t(a,A),l=o(b,l,m),null===d?c=b:d.sibling=b,d=b,A=g}if(v.done)return n(a,A),c;if(null===A){for(;!v.done;m++,v=s.next())null!==(v=f(a,v.value,u))&&(l=o(v,l,m),null===d?c=v:d.sibling=v,d=v);return c}for(A=r(a,A);!v.done;m++,v=s.next())null!==(v=h(A,a,m,v.value,u))&&(e&&null!==v.alternate&&A.delete(null===v.key?m:v.key),l=o(v,l,m),null===d?c=v:d.sibling=v,d=v);return e&&A.forEach((function(e){return t(a,e)})),c}return function(e,r,o,s){var u="object"==typeof o&&null!==o&&o.type===S&&null===o.key;u&&(o=o.props.children);var c="object"==typeof o&&null!==o;if(c)switch(o.$$typeof){case w:e:{for(c=o.key,u=r;null!==u;){if(u.key===c){if(7===u.tag){if(o.type===S){n(e,u.sibling),(r=a(u,o.props.children)).return=e,e=r;break e}}else if(u.elementType===o.type){n(e,u.sibling),(r=a(u,o.props)).ref=wo(e,u,o),r.return=e,e=r;break e}n(e,u);break}t(e,u),u=u.sibling}o.type===S?((r=Vs(o.props.children,e.mode,s,o.key)).return=e,e=r):((s=Ds(o.type,o.key,o.props,null,e.mode,s)).ref=wo(e,r,o),s.return=e,e=s)}return l(e);case k:e:{for(u=o.key;null!==r;){if(r.key===u){if(4===r.tag&&r.stateNode.containerInfo===o.containerInfo&&r.stateNode.implementation===o.implementation){n(e,r.sibling),(r=a(r,o.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=qs(o,e.mode,s)).return=e,e=r}return l(e)}if("string"==typeof o||"number"==typeof o)return o=""+o,null!==r&&6===r.tag?(n(e,r.sibling),(r=a(r,o)).return=e,e=r):(n(e,r),(r=Hs(o,e.mode,s)).return=e,e=r),l(e);if(Eo(o))return A(e,r,o,s);if(V(o))return m(e,r,o,s);if(c&&ko(e,o),void 0===o&&!u)switch(e.tag){case 1:case 22:case 0:case 11:case 15:throw Error(i(152,Q(e.type)||"Component"))}return n(e,r)}}var xo=So(!0),Oo=So(!1),_o={},Co=la(_o),Po=la(_o),jo=la(_o);function Lo(e){if(e===_o)throw Error(i(174));return e}function Bo(e,t){switch(ua(jo,t),ua(Po,e),ua(Co,_o),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:pe(null,"");break;default:t=pe(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}sa(Co),ua(Co,t)}function To(){sa(Co),sa(Po),sa(jo)}function Mo(e){Lo(jo.current);var t=Lo(Co.current),n=pe(t,e.type);t!==n&&(ua(Po,e),ua(Co,n))}function Ro(e){Po.current===e&&(sa(Co),sa(Po))}var No=la(0);function Fo(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Io=null,zo=null,Uo=!1;function Do(e,t){var n=Is(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.flags=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Vo(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);default:return!1}}function Wo(e){if(Uo){var t=zo;if(t){var n=t;if(!Vo(e,t)){if(!(t=$r(n.nextSibling))||!Vo(e,t))return e.flags=-1025&e.flags|2,Uo=!1,void(Io=e);Do(Io,n)}Io=e,zo=$r(t.firstChild)}else e.flags=-1025&e.flags|2,Uo=!1,Io=e}}function Ho(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Io=e}function qo(e){if(e!==Io)return!1;if(!Uo)return Ho(e),Uo=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!Vr(t,e.memoizedProps))for(t=zo;t;)Do(e,t),t=$r(t.nextSibling);if(Ho(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(i(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){zo=$r(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}zo=null}}else zo=Io?$r(e.stateNode.nextSibling):null;return!0}function $o(){zo=Io=null,Uo=!1}var Qo=[];function Yo(){for(var e=0;e<Qo.length;e++)Qo[e]._workInProgressVersionPrimary=null;Qo.length=0}var Ko=E.ReactCurrentDispatcher,Go=E.ReactCurrentBatchConfig,Xo=0,Jo=null,Zo=null,ei=null,ti=!1,ni=!1;function ri(){throw Error(i(321))}function ai(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!sr(e[n],t[n]))return!1;return!0}function oi(e,t,n,r,a,o){if(Xo=o,Jo=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,Ko.current=null===e||null===e.memoizedState?Li:Bi,e=n(r,a),ni){o=0;do{if(ni=!1,!(25>o))throw Error(i(301));o+=1,ei=Zo=null,t.updateQueue=null,Ko.current=Ti,e=n(r,a)}while(ni)}if(Ko.current=ji,t=null!==Zo&&null!==Zo.next,Xo=0,ei=Zo=Jo=null,ti=!1,t)throw Error(i(300));return e}function ii(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===ei?Jo.memoizedState=ei=e:ei=ei.next=e,ei}function li(){if(null===Zo){var e=Jo.alternate;e=null!==e?e.memoizedState:null}else e=Zo.next;var t=null===ei?Jo.memoizedState:ei.next;if(null!==t)ei=t,Zo=e;else{if(null===e)throw Error(i(310));e={memoizedState:(Zo=e).memoizedState,baseState:Zo.baseState,baseQueue:Zo.baseQueue,queue:Zo.queue,next:null},null===ei?Jo.memoizedState=ei=e:ei=ei.next=e}return ei}function si(e,t){return"function"==typeof t?t(e):t}function ui(e){var t=li(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=Zo,a=r.baseQueue,o=n.pending;if(null!==o){if(null!==a){var l=a.next;a.next=o.next,o.next=l}r.baseQueue=a=o,n.pending=null}if(null!==a){a=a.next,r=r.baseState;var s=l=o=null,u=a;do{var c=u.lane;if((Xo&c)===c)null!==s&&(s=s.next={lane:0,action:u.action,eagerReducer:u.eagerReducer,eagerState:u.eagerState,next:null}),r=u.eagerReducer===e?u.eagerState:e(r,u.action);else{var d={lane:c,action:u.action,eagerReducer:u.eagerReducer,eagerState:u.eagerState,next:null};null===s?(l=s=d,o=r):s=s.next=d,Jo.lanes|=c,Fl|=c}u=u.next}while(null!==u&&u!==a);null===s?o=r:s.next=l,sr(r,t.memoizedState)||(Ri=!0),t.memoizedState=r,t.baseState=o,t.baseQueue=s,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function ci(e){var t=li(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=n.dispatch,a=n.pending,o=t.memoizedState;if(null!==a){n.pending=null;var l=a=a.next;do{o=e(o,l.action),l=l.next}while(l!==a);sr(o,t.memoizedState)||(Ri=!0),t.memoizedState=o,null===t.baseQueue&&(t.baseState=o),n.lastRenderedState=o}return[o,r]}function di(e,t,n){var r=t._getVersion;r=r(t._source);var a=t._workInProgressVersionPrimary;if(null!==a?e=a===r:(e=e.mutableReadLanes,(e=(Xo&e)===e)&&(t._workInProgressVersionPrimary=r,Qo.push(t))),e)return n(t._source);throw Qo.push(t),Error(i(350))}function fi(e,t,n,r){var a=Pl;if(null===a)throw Error(i(349));var o=t._getVersion,l=o(t._source),s=Ko.current,u=s.useState((function(){return di(a,t,n)})),c=u[1],d=u[0];u=ei;var f=e.memoizedState,p=f.refs,h=p.getSnapshot,A=f.source;f=f.subscribe;var m=Jo;return e.memoizedState={refs:p,source:t,subscribe:r},s.useEffect((function(){p.getSnapshot=n,p.setSnapshot=c;var e=o(t._source);if(!sr(l,e)){e=n(t._source),sr(d,e)||(c(e),e=us(m),a.mutableReadLanes|=e&a.pendingLanes),e=a.mutableReadLanes,a.entangledLanes|=e;for(var r=a.entanglements,i=e;0<i;){var s=31-Vt(i),u=1<<s;r[s]|=e,i&=~u}}}),[n,t,r]),s.useEffect((function(){return r(t._source,(function(){var e=p.getSnapshot,n=p.setSnapshot;try{n(e(t._source));var r=us(m);a.mutableReadLanes|=r&a.pendingLanes}catch(e){n((function(){throw e}))}}))}),[t,r]),sr(h,n)&&sr(A,t)&&sr(f,r)||((e={pending:null,dispatch:null,lastRenderedReducer:si,lastRenderedState:d}).dispatch=c=Pi.bind(null,Jo,e),u.queue=e,u.baseQueue=null,d=di(a,t,n),u.memoizedState=u.baseState=d),d}function pi(e,t,n){return fi(li(),e,t,n)}function hi(e){var t=ii();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:si,lastRenderedState:e}).dispatch=Pi.bind(null,Jo,e),[t.memoizedState,e]}function Ai(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=Jo.updateQueue)?(t={lastEffect:null},Jo.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function mi(e){return e={current:e},ii().memoizedState=e}function gi(){return li().memoizedState}function vi(e,t,n,r){var a=ii();Jo.flags|=e,a.memoizedState=Ai(1|t,n,void 0,void 0===r?null:r)}function bi(e,t,n,r){var a=li();r=void 0===r?null:r;var o=void 0;if(null!==Zo){var i=Zo.memoizedState;if(o=i.destroy,null!==r&&ai(r,i.deps))return void Ai(t,n,o,r)}Jo.flags|=e,a.memoizedState=Ai(1|t,n,o,r)}function yi(e,t){return vi(516,4,e,t)}function Ei(e,t){return bi(516,4,e,t)}function wi(e,t){return bi(4,2,e,t)}function ki(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Si(e,t,n){return n=null!=n?n.concat([e]):null,bi(4,2,ki.bind(null,t,e),n)}function xi(){}function Oi(e,t){var n=li();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ai(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function _i(e,t){var n=li();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ai(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Ci(e,t){var n=Va();Ha(98>n?98:n,(function(){e(!0)})),Ha(97<n?97:n,(function(){var n=Go.transition;Go.transition=1;try{e(!1),t()}finally{Go.transition=n}}))}function Pi(e,t,n){var r=ss(),a=us(e),o={lane:a,action:n,eagerReducer:null,eagerState:null,next:null},i=t.pending;if(null===i?o.next=o:(o.next=i.next,i.next=o),t.pending=o,i=e.alternate,e===Jo||null!==i&&i===Jo)ni=ti=!0;else{if(0===e.lanes&&(null===i||0===i.lanes)&&null!==(i=t.lastRenderedReducer))try{var l=t.lastRenderedState,s=i(l,n);if(o.eagerReducer=i,o.eagerState=s,sr(s,l))return}catch(e){}cs(e,a,r)}}var ji={readContext:ao,useCallback:ri,useContext:ri,useEffect:ri,useImperativeHandle:ri,useLayoutEffect:ri,useMemo:ri,useReducer:ri,useRef:ri,useState:ri,useDebugValue:ri,useDeferredValue:ri,useTransition:ri,useMutableSource:ri,useOpaqueIdentifier:ri,unstable_isNewReconciler:!1},Li={readContext:ao,useCallback:function(e,t){return ii().memoizedState=[e,void 0===t?null:t],e},useContext:ao,useEffect:yi,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,vi(4,2,ki.bind(null,t,e),n)},useLayoutEffect:function(e,t){return vi(4,2,e,t)},useMemo:function(e,t){var n=ii();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=ii();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=Pi.bind(null,Jo,e),[r.memoizedState,e]},useRef:mi,useState:hi,useDebugValue:xi,useDeferredValue:function(e){var t=hi(e),n=t[0],r=t[1];return yi((function(){var t=Go.transition;Go.transition=1;try{r(e)}finally{Go.transition=t}}),[e]),n},useTransition:function(){var e=hi(!1),t=e[0];return mi(e=Ci.bind(null,e[1])),[e,t]},useMutableSource:function(e,t,n){var r=ii();return r.memoizedState={refs:{getSnapshot:t,setSnapshot:null},source:e,subscribe:n},fi(r,e,t,n)},useOpaqueIdentifier:function(){if(Uo){var e=!1,t=function(e){return{$$typeof:R,toString:e,valueOf:e}}((function(){throw e||(e=!0,n("r:"+(Yr++).toString(36))),Error(i(355))})),n=hi(t)[1];return 0==(2&Jo.mode)&&(Jo.flags|=516,Ai(5,(function(){n("r:"+(Yr++).toString(36))}),void 0,null)),t}return hi(t="r:"+(Yr++).toString(36)),t},unstable_isNewReconciler:!1},Bi={readContext:ao,useCallback:Oi,useContext:ao,useEffect:Ei,useImperativeHandle:Si,useLayoutEffect:wi,useMemo:_i,useReducer:ui,useRef:gi,useState:function(){return ui(si)},useDebugValue:xi,useDeferredValue:function(e){var t=ui(si),n=t[0],r=t[1];return Ei((function(){var t=Go.transition;Go.transition=1;try{r(e)}finally{Go.transition=t}}),[e]),n},useTransition:function(){var e=ui(si)[0];return[gi().current,e]},useMutableSource:pi,useOpaqueIdentifier:function(){return ui(si)[0]},unstable_isNewReconciler:!1},Ti={readContext:ao,useCallback:Oi,useContext:ao,useEffect:Ei,useImperativeHandle:Si,useLayoutEffect:wi,useMemo:_i,useReducer:ci,useRef:gi,useState:function(){return ci(si)},useDebugValue:xi,useDeferredValue:function(e){var t=ci(si),n=t[0],r=t[1];return Ei((function(){var t=Go.transition;Go.transition=1;try{r(e)}finally{Go.transition=t}}),[e]),n},useTransition:function(){var e=ci(si)[0];return[gi().current,e]},useMutableSource:pi,useOpaqueIdentifier:function(){return ci(si)[0]},unstable_isNewReconciler:!1},Mi=E.ReactCurrentOwner,Ri=!1;function Ni(e,t,n,r){t.child=null===e?Oo(t,null,n,r):xo(t,e.child,n,r)}function Fi(e,t,n,r,a){n=n.render;var o=t.ref;return ro(t,a),r=oi(e,t,n,r,o,a),null===e||Ri?(t.flags|=1,Ni(e,t,r,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~a,tl(e,t,a))}function Ii(e,t,n,r,a,o){if(null===e){var i=n.type;return"function"!=typeof i||zs(i)||void 0!==i.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Ds(n.type,null,r,t,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=i,zi(e,t,i,r,a,o))}return i=e.child,0==(a&o)&&(a=i.memoizedProps,(n=null!==(n=n.compare)?n:cr)(a,r)&&e.ref===t.ref)?tl(e,t,o):(t.flags|=1,(e=Us(i,r)).ref=t.ref,e.return=t,t.child=e)}function zi(e,t,n,r,a,o){if(null!==e&&cr(e.memoizedProps,r)&&e.ref===t.ref){if(Ri=!1,0==(o&a))return t.lanes=e.lanes,tl(e,t,o);0!=(16384&e.flags)&&(Ri=!0)}return Vi(e,t,n,r,o)}function Ui(e,t,n){var r=t.pendingProps,a=r.children,o=null!==e?e.memoizedState:null;if("hidden"===r.mode||"unstable-defer-without-hiding"===r.mode)if(0==(4&t.mode))t.memoizedState={baseLanes:0},ms(0,n);else{if(0==(1073741824&n))return e=null!==o?o.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e},ms(0,e),null;t.memoizedState={baseLanes:0},ms(0,null!==o?o.baseLanes:n)}else null!==o?(r=o.baseLanes|n,t.memoizedState=null):r=n,ms(0,r);return Ni(e,t,a,n),t.child}function Di(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=128)}function Vi(e,t,n,r,a){var o=Aa(n)?pa:da.current;return o=ha(t,o),ro(t,a),n=oi(e,t,n,r,o,a),null===e||Ri?(t.flags|=1,Ni(e,t,n,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~a,tl(e,t,a))}function Wi(e,t,n,r,a){if(Aa(n)){var o=!0;ba(t)}else o=!1;if(ro(t,a),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),vo(t,n,r),yo(t,n,r,a),r=!0;else if(null===e){var i=t.stateNode,l=t.memoizedProps;i.props=l;var s=i.context,u=n.contextType;u="object"==typeof u&&null!==u?ao(u):ha(t,u=Aa(n)?pa:da.current);var c=n.getDerivedStateFromProps,d="function"==typeof c||"function"==typeof i.getSnapshotBeforeUpdate;d||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==r||s!==u)&&bo(t,i,r,u),oo=!1;var f=t.memoizedState;i.state=f,fo(t,r,i,a),s=t.memoizedState,l!==r||f!==s||fa.current||oo?("function"==typeof c&&(Ao(t,n,c,r),s=t.memoizedState),(l=oo||go(t,n,l,r,f,s,u))?(d||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.flags|=4)):("function"==typeof i.componentDidMount&&(t.flags|=4),t.memoizedProps=r,t.memoizedState=s),i.props=r,i.state=s,i.context=u,r=l):("function"==typeof i.componentDidMount&&(t.flags|=4),r=!1)}else{i=t.stateNode,lo(e,t),l=t.memoizedProps,u=t.type===t.elementType?l:Ka(t.type,l),i.props=u,d=t.pendingProps,f=i.context,s="object"==typeof(s=n.contextType)&&null!==s?ao(s):ha(t,s=Aa(n)?pa:da.current);var p=n.getDerivedStateFromProps;(c="function"==typeof p||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==d||f!==s)&&bo(t,i,r,s),oo=!1,f=t.memoizedState,i.state=f,fo(t,r,i,a);var h=t.memoizedState;l!==d||f!==h||fa.current||oo?("function"==typeof p&&(Ao(t,n,p,r),h=t.memoizedState),(u=oo||go(t,n,u,r,f,h,s))?(c||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,h,s),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,h,s)),"function"==typeof i.componentDidUpdate&&(t.flags|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.flags|=256)):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&f===e.memoizedState||(t.flags|=256),t.memoizedProps=r,t.memoizedState=h),i.props=r,i.state=h,i.context=s,r=u):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&f===e.memoizedState||(t.flags|=256),r=!1)}return Hi(e,t,n,r,o,a)}function Hi(e,t,n,r,a,o){Di(e,t);var i=0!=(64&t.flags);if(!r&&!i)return a&&ya(t,n,!1),tl(e,t,o);r=t.stateNode,Mi.current=t;var l=i&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&i?(t.child=xo(t,e.child,null,o),t.child=xo(t,null,l,o)):Ni(e,t,l,o),t.memoizedState=r.state,a&&ya(t,n,!0),t.child}function qi(e){var t=e.stateNode;t.pendingContext?ga(0,t.pendingContext,t.pendingContext!==t.context):t.context&&ga(0,t.context,!1),Bo(e,t.containerInfo)}var $i,Qi,Yi,Ki={dehydrated:null,retryLane:0};function Gi(e,t,n){var r,a=t.pendingProps,o=No.current,i=!1;return(r=0!=(64&t.flags))||(r=(null===e||null!==e.memoizedState)&&0!=(2&o)),r?(i=!0,t.flags&=-65):null!==e&&null===e.memoizedState||void 0===a.fallback||!0===a.unstable_avoidThisFallback||(o|=1),ua(No,1&o),null===e?(void 0!==a.fallback&&Wo(t),e=a.children,o=a.fallback,i?(e=Xi(t,e,o,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Ki,e):"number"==typeof a.unstable_expectedLoadTime?(e=Xi(t,e,o,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Ki,t.lanes=33554432,e):((n=Ws({mode:"visible",children:e},t.mode,n,null)).return=t,t.child=n)):(e.memoizedState,i?(a=function(e,t,n,r,a){var o=t.mode,i=e.child;e=i.sibling;var l={mode:"hidden",children:n};return 0==(2&o)&&t.child!==i?((n=t.child).childLanes=0,n.pendingProps=l,null!==(i=n.lastEffect)?(t.firstEffect=n.firstEffect,t.lastEffect=i,i.nextEffect=null):t.firstEffect=t.lastEffect=null):n=Us(i,l),null!==e?r=Us(e,r):(r=Vs(r,o,a,null)).flags|=2,r.return=t,n.return=t,n.sibling=r,t.child=n,r}(e,t,a.children,a.fallback,n),i=t.child,o=e.child.memoizedState,i.memoizedState=null===o?{baseLanes:n}:{baseLanes:o.baseLanes|n},i.childLanes=e.childLanes&~n,t.memoizedState=Ki,a):(n=function(e,t,n,r){var a=e.child;return e=a.sibling,n=Us(a,{mode:"visible",children:n}),0==(2&t.mode)&&(n.lanes=r),n.return=t,n.sibling=null,null!==e&&(e.nextEffect=null,e.flags=8,t.firstEffect=t.lastEffect=e),t.child=n}(e,t,a.children,n),t.memoizedState=null,n))}function Xi(e,t,n,r){var a=e.mode,o=e.child;return t={mode:"hidden",children:t},0==(2&a)&&null!==o?(o.childLanes=0,o.pendingProps=t):o=Ws(t,a,0,null),n=Vs(n,a,r,null),o.return=e,n.return=e,o.sibling=n,e.child=o,n}function Ji(e,t){e.lanes|=t;var n=e.alternate;null!==n&&(n.lanes|=t),no(e.return,t)}function Zi(e,t,n,r,a,o){var i=e.memoizedState;null===i?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:a,lastEffect:o}:(i.isBackwards=t,i.rendering=null,i.renderingStartTime=0,i.last=r,i.tail=n,i.tailMode=a,i.lastEffect=o)}function el(e,t,n){var r=t.pendingProps,a=r.revealOrder,o=r.tail;if(Ni(e,t,r.children,n),0!=(2&(r=No.current)))r=1&r|2,t.flags|=64;else{if(null!==e&&0!=(64&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Ji(e,n);else if(19===e.tag)Ji(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(ua(No,r),0==(2&t.mode))t.memoizedState=null;else switch(a){case"forwards":for(n=t.child,a=null;null!==n;)null!==(e=n.alternate)&&null===Fo(e)&&(a=n),n=n.sibling;null===(n=a)?(a=t.child,t.child=null):(a=n.sibling,n.sibling=null),Zi(t,!1,a,n,o,t.lastEffect);break;case"backwards":for(n=null,a=t.child,t.child=null;null!==a;){if(null!==(e=a.alternate)&&null===Fo(e)){t.child=a;break}e=a.sibling,a.sibling=n,n=a,a=e}Zi(t,!0,n,null,o,t.lastEffect);break;case"together":Zi(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function tl(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Fl|=t.lanes,0!=(n&t.childLanes)){if(null!==e&&t.child!==e.child)throw Error(i(153));if(null!==t.child){for(n=Us(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Us(e,e.pendingProps)).return=t;n.sibling=null}return t.child}return null}function nl(e,t){if(!Uo)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function rl(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:case 17:return Aa(t.type)&&ma(),null;case 3:return To(),sa(fa),sa(da),Yo(),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(qo(t)?t.flags|=4:r.hydrate||(t.flags|=256)),null;case 5:Ro(t);var o=Lo(jo.current);if(n=t.type,null!==e&&null!=t.stateNode)Qi(e,t,n,r),e.ref!==t.ref&&(t.flags|=128);else{if(!r){if(null===t.stateNode)throw Error(i(166));return null}if(e=Lo(Co.current),qo(t)){r=t.stateNode,n=t.type;var l=t.memoizedProps;switch(r[Gr]=t,r[Xr]=l,n){case"dialog":Cr("cancel",r),Cr("close",r);break;case"iframe":case"object":case"embed":Cr("load",r);break;case"video":case"audio":for(e=0;e<Sr.length;e++)Cr(Sr[e],r);break;case"source":Cr("error",r);break;case"img":case"image":case"link":Cr("error",r),Cr("load",r);break;case"details":Cr("toggle",r);break;case"input":ee(r,l),Cr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!l.multiple},Cr("invalid",r);break;case"textarea":se(r,l),Cr("invalid",r)}for(var u in ke(n,l),e=null,l)l.hasOwnProperty(u)&&(o=l[u],"children"===u?"string"==typeof o?r.textContent!==o&&(e=["children",o]):"number"==typeof o&&r.textContent!==""+o&&(e=["children",""+o]):s.hasOwnProperty(u)&&null!=o&&"onScroll"===u&&Cr("scroll",r));switch(n){case"input":G(r),re(r,l,!0);break;case"textarea":G(r),ce(r);break;case"select":case"option":break;default:"function"==typeof l.onClick&&(r.onclick=Ir)}r=e,t.updateQueue=r,null!==r&&(t.flags|=4)}else{switch(u=9===o.nodeType?o:o.ownerDocument,e===de&&(e=fe(n)),e===de?"script"===n?((e=u.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=u.createElement(n,{is:r.is}):(e=u.createElement(n),"select"===n&&(u=e,r.multiple?u.multiple=!0:r.size&&(u.size=r.size))):e=u.createElementNS(e,n),e[Gr]=t,e[Xr]=r,$i(e,t),t.stateNode=e,u=Se(n,r),n){case"dialog":Cr("cancel",e),Cr("close",e),o=r;break;case"iframe":case"object":case"embed":Cr("load",e),o=r;break;case"video":case"audio":for(o=0;o<Sr.length;o++)Cr(Sr[o],e);o=r;break;case"source":Cr("error",e),o=r;break;case"img":case"image":case"link":Cr("error",e),Cr("load",e),o=r;break;case"details":Cr("toggle",e),o=r;break;case"input":ee(e,r),o=Z(e,r),Cr("invalid",e);break;case"option":o=oe(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},o=a({},r,{value:void 0}),Cr("invalid",e);break;case"textarea":se(e,r),o=le(e,r),Cr("invalid",e);break;default:o=r}ke(n,o);var c=o;for(l in c)if(c.hasOwnProperty(l)){var d=c[l];"style"===l?Ee(e,d):"dangerouslySetInnerHTML"===l?null!=(d=d?d.__html:void 0)&&me(e,d):"children"===l?"string"==typeof d?("textarea"!==n||""!==d)&&ge(e,d):"number"==typeof d&&ge(e,""+d):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(s.hasOwnProperty(l)?null!=d&&"onScroll"===l&&Cr("scroll",e):null!=d&&y(e,l,d,u))}switch(n){case"input":G(e),re(e,r,!1);break;case"textarea":G(e),ce(e);break;case"option":null!=r.value&&e.setAttribute("value",""+Y(r.value));break;case"select":e.multiple=!!r.multiple,null!=(l=r.value)?ie(e,!!r.multiple,l,!1):null!=r.defaultValue&&ie(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof o.onClick&&(e.onclick=Ir)}Dr(n,r)&&(t.flags|=4)}null!==t.ref&&(t.flags|=128)}return null;case 6:if(e&&null!=t.stateNode)Yi(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(i(166));n=Lo(jo.current),Lo(Co.current),qo(t)?(r=t.stateNode,n=t.memoizedProps,r[Gr]=t,r.nodeValue!==n&&(t.flags|=4)):((r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[Gr]=t,t.stateNode=r)}return null;case 13:return sa(No),r=t.memoizedState,0!=(64&t.flags)?(t.lanes=n,t):(r=null!==r,n=!1,null===e?void 0!==t.memoizedProps.fallback&&qo(t):n=null!==e.memoizedState,r&&!n&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&No.current)?0===Ml&&(Ml=3):(0!==Ml&&3!==Ml||(Ml=4),null===Pl||0==(134217727&Fl)&&0==(134217727&Il)||hs(Pl,Ll))),(r||n)&&(t.flags|=4),null);case 4:return To(),null===e&&jr(t.stateNode.containerInfo),null;case 10:return to(t),null;case 19:if(sa(No),null===(r=t.memoizedState))return null;if(l=0!=(64&t.flags),null===(u=r.rendering))if(l)nl(r,!1);else{if(0!==Ml||null!==e&&0!=(64&e.flags))for(e=t.child;null!==e;){if(null!==(u=Fo(e))){for(t.flags|=64,nl(r,!1),null!==(l=u.updateQueue)&&(t.updateQueue=l,t.flags|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=n,n=t.child;null!==n;)e=r,(l=n).flags&=2,l.nextEffect=null,l.firstEffect=null,l.lastEffect=null,null===(u=l.alternate)?(l.childLanes=0,l.lanes=e,l.child=null,l.memoizedProps=null,l.memoizedState=null,l.updateQueue=null,l.dependencies=null,l.stateNode=null):(l.childLanes=u.childLanes,l.lanes=u.lanes,l.child=u.child,l.memoizedProps=u.memoizedProps,l.memoizedState=u.memoizedState,l.updateQueue=u.updateQueue,l.type=u.type,e=u.dependencies,l.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return ua(No,1&No.current|2),t.child}e=e.sibling}null!==r.tail&&Da()>Vl&&(t.flags|=64,l=!0,nl(r,!1),t.lanes=33554432)}else{if(!l)if(null!==(e=Fo(u))){if(t.flags|=64,l=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),nl(r,!0),null===r.tail&&"hidden"===r.tailMode&&!u.alternate&&!Uo)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*Da()-r.renderingStartTime>Vl&&1073741824!==n&&(t.flags|=64,l=!0,nl(r,!1),t.lanes=33554432);r.isBackwards?(u.sibling=t.child,t.child=u):(null!==(n=r.last)?n.sibling=u:t.child=u,r.last=u)}return null!==r.tail?(n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=Da(),n.sibling=null,t=No.current,ua(No,l?1&t|2:1&t),n):null;case 23:case 24:return gs(),null!==e&&null!==e.memoizedState!=(null!==t.memoizedState)&&"unstable-defer-without-hiding"!==r.mode&&(t.flags|=4),null}throw Error(i(156,t.tag))}function al(e){switch(e.tag){case 1:Aa(e.type)&&ma();var t=e.flags;return 4096&t?(e.flags=-4097&t|64,e):null;case 3:if(To(),sa(fa),sa(da),Yo(),0!=(64&(t=e.flags)))throw Error(i(285));return e.flags=-4097&t|64,e;case 5:return Ro(e),null;case 13:return sa(No),4096&(t=e.flags)?(e.flags=-4097&t|64,e):null;case 19:return sa(No),null;case 4:return To(),null;case 10:return to(e),null;case 23:case 24:return gs(),null;default:return null}}function ol(e,t){try{var n="",r=t;do{n+=$(r),r=r.return}while(r);var a=n}catch(e){a="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:a}}function il(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}$i=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Qi=function(e,t,n,r){var o=e.memoizedProps;if(o!==r){e=t.stateNode,Lo(Co.current);var i,l=null;switch(n){case"input":o=Z(e,o),r=Z(e,r),l=[];break;case"option":o=oe(e,o),r=oe(e,r),l=[];break;case"select":o=a({},o,{value:void 0}),r=a({},r,{value:void 0}),l=[];break;case"textarea":o=le(e,o),r=le(e,r),l=[];break;default:"function"!=typeof o.onClick&&"function"==typeof r.onClick&&(e.onclick=Ir)}for(d in ke(n,r),n=null,o)if(!r.hasOwnProperty(d)&&o.hasOwnProperty(d)&&null!=o[d])if("style"===d){var u=o[d];for(i in u)u.hasOwnProperty(i)&&(n||(n={}),n[i]="")}else"dangerouslySetInnerHTML"!==d&&"children"!==d&&"suppressContentEditableWarning"!==d&&"suppressHydrationWarning"!==d&&"autoFocus"!==d&&(s.hasOwnProperty(d)?l||(l=[]):(l=l||[]).push(d,null));for(d in r){var c=r[d];if(u=null!=o?o[d]:void 0,r.hasOwnProperty(d)&&c!==u&&(null!=c||null!=u))if("style"===d)if(u){for(i in u)!u.hasOwnProperty(i)||c&&c.hasOwnProperty(i)||(n||(n={}),n[i]="");for(i in c)c.hasOwnProperty(i)&&u[i]!==c[i]&&(n||(n={}),n[i]=c[i])}else n||(l||(l=[]),l.push(d,n)),n=c;else"dangerouslySetInnerHTML"===d?(c=c?c.__html:void 0,u=u?u.__html:void 0,null!=c&&u!==c&&(l=l||[]).push(d,c)):"children"===d?"string"!=typeof c&&"number"!=typeof c||(l=l||[]).push(d,""+c):"suppressContentEditableWarning"!==d&&"suppressHydrationWarning"!==d&&(s.hasOwnProperty(d)?(null!=c&&"onScroll"===d&&Cr("scroll",e),l||u===c||(l=[])):"object"==typeof c&&null!==c&&c.$$typeof===R?c.toString():(l=l||[]).push(d,c))}n&&(l=l||[]).push("style",n);var d=l;(t.updateQueue=d)&&(t.flags|=4)}},Yi=function(e,t,n,r){n!==r&&(t.flags|=4)};var ll="function"==typeof WeakMap?WeakMap:Map;function sl(e,t,n){(n=so(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){$l||($l=!0,Ql=r),il(0,t)},n}function ul(e,t,n){(n=so(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var a=t.value;n.payload=function(){return il(0,t),r(a)}}var o=e.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Yl?Yl=new Set([this]):Yl.add(this),il(0,t));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}var cl="function"==typeof WeakSet?WeakSet:Set;function dl(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Ms(e,t)}else t.current=null}function fl(e,t){switch(t.tag){case 0:case 11:case 15:case 22:case 5:case 6:case 4:case 17:return;case 1:if(256&t.flags&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Ka(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:return void(256&t.flags&&qr(t.stateNode.containerInfo))}throw Error(i(163))}function pl(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{if(3==(3&e.tag)){var r=e.create;e.destroy=r()}e=e.next}while(e!==t)}if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{var a=e;r=a.next,0!=(4&(a=a.tag))&&0!=(1&a)&&(Ls(n,e),js(n,e)),e=r}while(e!==t)}return;case 1:return e=n.stateNode,4&n.flags&&(null===t?e.componentDidMount():(r=n.elementType===n.type?t.memoizedProps:Ka(n.type,t.memoizedProps),e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate))),void(null!==(t=n.updateQueue)&&po(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:case 1:e=n.child.stateNode}po(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.flags&&Dr(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:case 19:case 17:case 20:case 21:case 23:case 24:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&yt(n)))))}throw Error(i(163))}function hl(e,t){for(var n=e;;){if(5===n.tag){var r=n.stateNode;if(t)"function"==typeof(r=r.style).setProperty?r.setProperty("display","none","important"):r.display="none";else{r=n.stateNode;var a=n.memoizedProps.style;a=null!=a&&a.hasOwnProperty("display")?a.display:null,r.style.display=ye("display",a)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else if((23!==n.tag&&24!==n.tag||null===n.memoizedState||n===e)&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function Al(e,t){if(wa&&"function"==typeof wa.onCommitFiberUnmount)try{wa.onCommitFiberUnmount(Ea,t)}catch(e){}switch(t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var n=e=e.next;do{var r=n,a=r.destroy;if(r=r.tag,void 0!==a)if(0!=(4&r))Ls(t,n);else{r=t;try{a()}catch(e){Ms(r,e)}}n=n.next}while(n!==e)}break;case 1:if(dl(t),"function"==typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){Ms(t,e)}break;case 5:dl(t);break;case 4:El(e,t)}}function ml(e){e.alternate=null,e.child=null,e.dependencies=null,e.firstEffect=null,e.lastEffect=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.return=null,e.updateQueue=null}function gl(e){return 5===e.tag||3===e.tag||4===e.tag}function vl(e){e:{for(var t=e.return;null!==t;){if(gl(t))break e;t=t.return}throw Error(i(160))}var n=t;switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(i(161))}16&n.flags&&(ge(t,""),n.flags&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||gl(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.flags)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.flags)){n=n.stateNode;break e}}r?bl(e,n,t):yl(e,n,t)}function bl(e,t,n){var r=e.tag,a=5===r||6===r;if(a)e=a?e.stateNode:e.stateNode.instance,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Ir));else if(4!==r&&null!==(e=e.child))for(bl(e,t,n),e=e.sibling;null!==e;)bl(e,t,n),e=e.sibling}function yl(e,t,n){var r=e.tag,a=5===r||6===r;if(a)e=a?e.stateNode:e.stateNode.instance,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(yl(e,t,n),e=e.sibling;null!==e;)yl(e,t,n),e=e.sibling}function El(e,t){for(var n,r,a=t,o=!1;;){if(!o){o=a.return;e:for(;;){if(null===o)throw Error(i(160));switch(n=o.stateNode,o.tag){case 5:r=!1;break e;case 3:case 4:n=n.containerInfo,r=!0;break e}o=o.return}o=!0}if(5===a.tag||6===a.tag){e:for(var l=e,s=a,u=s;;)if(Al(l,u),null!==u.child&&4!==u.tag)u.child.return=u,u=u.child;else{if(u===s)break e;for(;null===u.sibling;){if(null===u.return||u.return===s)break e;u=u.return}u.sibling.return=u.return,u=u.sibling}r?(l=n,s=a.stateNode,8===l.nodeType?l.parentNode.removeChild(s):l.removeChild(s)):n.removeChild(a.stateNode)}else if(4===a.tag){if(null!==a.child){n=a.stateNode.containerInfo,r=!0,a.child.return=a,a=a.child;continue}}else if(Al(e,a),null!==a.child){a.child.return=a,a=a.child;continue}if(a===t)break;for(;null===a.sibling;){if(null===a.return||a.return===t)return;4===(a=a.return).tag&&(o=!1)}a.sibling.return=a.return,a=a.sibling}}function wl(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:var n=t.updateQueue;if(null!==(n=null!==n?n.lastEffect:null)){var r=n=n.next;do{3==(3&r.tag)&&(e=r.destroy,r.destroy=void 0,void 0!==e&&e()),r=r.next}while(r!==n)}return;case 1:case 12:case 17:return;case 5:if(null!=(n=t.stateNode)){r=t.memoizedProps;var a=null!==e?e.memoizedProps:r;e=t.type;var o=t.updateQueue;if(t.updateQueue=null,null!==o){for(n[Xr]=r,"input"===e&&"radio"===r.type&&null!=r.name&&te(n,r),Se(e,a),t=Se(e,r),a=0;a<o.length;a+=2){var l=o[a],s=o[a+1];"style"===l?Ee(n,s):"dangerouslySetInnerHTML"===l?me(n,s):"children"===l?ge(n,s):y(n,l,s,t)}switch(e){case"input":ne(n,r);break;case"textarea":ue(n,r);break;case"select":e=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(o=r.value)?ie(n,!!r.multiple,o,!1):e!==!!r.multiple&&(null!=r.defaultValue?ie(n,!!r.multiple,r.defaultValue,!0):ie(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(i(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((n=t.stateNode).hydrate&&(n.hydrate=!1,yt(n.containerInfo)));case 13:return null!==t.memoizedState&&(Dl=Da(),hl(t.child,!0)),void kl(t);case 19:return void kl(t);case 23:case 24:return void hl(t,null!==t.memoizedState)}throw Error(i(163))}function kl(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new cl),t.forEach((function(t){var r=Ns.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function Sl(e,t){return null!==e&&(null===(e=e.memoizedState)||null!==e.dehydrated)&&null!==(t=t.memoizedState)&&null===t.dehydrated}var xl=Math.ceil,Ol=E.ReactCurrentDispatcher,_l=E.ReactCurrentOwner,Cl=0,Pl=null,jl=null,Ll=0,Bl=0,Tl=la(0),Ml=0,Rl=null,Nl=0,Fl=0,Il=0,zl=0,Ul=null,Dl=0,Vl=1/0;function Wl(){Vl=Da()+500}var Hl,ql=null,$l=!1,Ql=null,Yl=null,Kl=!1,Gl=null,Xl=90,Jl=[],Zl=[],es=null,ts=0,ns=null,rs=-1,as=0,os=0,is=null,ls=!1;function ss(){return 0!=(48&Cl)?Da():-1!==rs?rs:rs=Da()}function us(e){if(0==(2&(e=e.mode)))return 1;if(0==(4&e))return 99===Va()?1:2;if(0===as&&(as=Nl),0!==Ya.transition){0!==os&&(os=null!==Ul?Ul.pendingLanes:0),e=as;var t=4186112&~os;return 0==(t&=-t)&&0==(t=(e=4186112&~e)&-e)&&(t=8192),t}return e=Va(),e=It(0!=(4&Cl)&&98===e?12:e=function(e){switch(e){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(e),as)}function cs(e,t,n){if(50<ts)throw ts=0,ns=null,Error(i(185));if(null===(e=ds(e,t)))return null;Dt(e,t,n),e===Pl&&(Il|=t,4===Ml&&hs(e,Ll));var r=Va();1===t?0!=(8&Cl)&&0==(48&Cl)?As(e):(fs(e,n),0===Cl&&(Wl(),$a())):(0==(4&Cl)||98!==r&&99!==r||(null===es?es=new Set([e]):es.add(e)),fs(e,n)),Ul=e}function ds(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}function fs(e,t){for(var n=e.callbackNode,r=e.suspendedLanes,a=e.pingedLanes,o=e.expirationTimes,l=e.pendingLanes;0<l;){var s=31-Vt(l),u=1<<s,c=o[s];if(-1===c){if(0==(u&r)||0!=(u&a)){c=t,Rt(u);var d=Mt;o[s]=10<=d?c+250:6<=d?c+5e3:-1}}else c<=t&&(e.expiredLanes|=u);l&=~u}if(r=Nt(e,e===Pl?Ll:0),t=Mt,0===r)null!==n&&(n!==Ra&&xa(n),e.callbackNode=null,e.callbackPriority=0);else{if(null!==n){if(e.callbackPriority===t)return;n!==Ra&&xa(n)}15===t?(n=As.bind(null,e),null===Fa?(Fa=[n],Ia=Sa(ja,Qa)):Fa.push(n),n=Ra):14===t?n=qa(99,As.bind(null,e)):(n=function(e){switch(e){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(i(358,e))}}(t),n=qa(n,ps.bind(null,e))),e.callbackPriority=t,e.callbackNode=n}}function ps(e){if(rs=-1,os=as=0,0!=(48&Cl))throw Error(i(327));var t=e.callbackNode;if(Ps()&&e.callbackNode!==t)return null;var n=Nt(e,e===Pl?Ll:0);if(0===n)return null;var r=n,a=Cl;Cl|=16;var o=ys();for(Pl===e&&Ll===r||(Wl(),vs(e,r));;)try{ks();break}catch(t){bs(e,t)}if(eo(),Ol.current=o,Cl=a,null!==jl?r=0:(Pl=null,Ll=0,r=Ml),0!=(Nl&Il))vs(e,0);else if(0!==r){if(2===r&&(Cl|=64,e.hydrate&&(e.hydrate=!1,qr(e.containerInfo)),0!==(n=Ft(e))&&(r=Es(e,n))),1===r)throw t=Rl,vs(e,0),hs(e,n),fs(e,Da()),t;switch(e.finishedWork=e.current.alternate,e.finishedLanes=n,r){case 0:case 1:throw Error(i(345));case 2:case 5:Os(e);break;case 3:if(hs(e,n),(62914560&n)===n&&10<(r=Dl+500-Da())){if(0!==Nt(e,0))break;if(((a=e.suspendedLanes)&n)!==n){ss(),e.pingedLanes|=e.suspendedLanes&a;break}e.timeoutHandle=Wr(Os.bind(null,e),r);break}Os(e);break;case 4:if(hs(e,n),(4186112&n)===n)break;for(r=e.eventTimes,a=-1;0<n;){var l=31-Vt(n);o=1<<l,(l=r[l])>a&&(a=l),n&=~o}if(n=a,10<(n=(120>(n=Da()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*xl(n/1960))-n)){e.timeoutHandle=Wr(Os.bind(null,e),n);break}Os(e);break;default:throw Error(i(329))}}return fs(e,Da()),e.callbackNode===t?ps.bind(null,e):null}function hs(e,t){for(t&=~zl,t&=~Il,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-Vt(t),r=1<<n;e[n]=-1,t&=~r}}function As(e){if(0!=(48&Cl))throw Error(i(327));if(Ps(),e===Pl&&0!=(e.expiredLanes&Ll)){var t=Ll,n=Es(e,t);0!=(Nl&Il)&&(n=Es(e,t=Nt(e,t)))}else n=Es(e,t=Nt(e,0));if(0!==e.tag&&2===n&&(Cl|=64,e.hydrate&&(e.hydrate=!1,qr(e.containerInfo)),0!==(t=Ft(e))&&(n=Es(e,t))),1===n)throw n=Rl,vs(e,0),hs(e,t),fs(e,Da()),n;return e.finishedWork=e.current.alternate,e.finishedLanes=t,Os(e),fs(e,Da()),null}function ms(e,t){ua(Tl,Bl),Bl|=t,Nl|=t}function gs(){Bl=Tl.current,sa(Tl)}function vs(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,Hr(n)),null!==jl)for(n=jl.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&ma();break;case 3:To(),sa(fa),sa(da),Yo();break;case 5:Ro(r);break;case 4:To();break;case 13:case 19:sa(No);break;case 10:to(r);break;case 23:case 24:gs()}n=n.return}Pl=e,jl=Us(e.current,null),Ll=Bl=Nl=t,Ml=0,Rl=null,zl=Il=Fl=0}function bs(e,t){for(;;){var n=jl;try{if(eo(),Ko.current=ji,ti){for(var r=Jo.memoizedState;null!==r;){var a=r.queue;null!==a&&(a.pending=null),r=r.next}ti=!1}if(Xo=0,ei=Zo=Jo=null,ni=!1,_l.current=null,null===n||null===n.return){Ml=1,Rl=t,jl=null;break}e:{var o=e,i=n.return,l=n,s=t;if(t=Ll,l.flags|=2048,l.firstEffect=l.lastEffect=null,null!==s&&"object"==typeof s&&"function"==typeof s.then){var u=s;if(0==(2&l.mode)){var c=l.alternate;c?(l.updateQueue=c.updateQueue,l.memoizedState=c.memoizedState,l.lanes=c.lanes):(l.updateQueue=null,l.memoizedState=null)}var d=0!=(1&No.current),f=i;do{var p;if(p=13===f.tag){var h=f.memoizedState;if(null!==h)p=null!==h.dehydrated;else{var A=f.memoizedProps;p=void 0!==A.fallback&&(!0!==A.unstable_avoidThisFallback||!d)}}if(p){var m=f.updateQueue;if(null===m){var g=new Set;g.add(u),f.updateQueue=g}else m.add(u);if(0==(2&f.mode)){if(f.flags|=64,l.flags|=16384,l.flags&=-2981,1===l.tag)if(null===l.alternate)l.tag=17;else{var v=so(-1,1);v.tag=2,uo(l,v)}l.lanes|=1;break e}s=void 0,l=t;var b=o.pingCache;if(null===b?(b=o.pingCache=new ll,s=new Set,b.set(u,s)):void 0===(s=b.get(u))&&(s=new Set,b.set(u,s)),!s.has(l)){s.add(l);var y=Rs.bind(null,o,u,l);u.then(y,y)}f.flags|=4096,f.lanes=t;break e}f=f.return}while(null!==f);s=Error((Q(l.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==Ml&&(Ml=2),s=ol(s,l),f=i;do{switch(f.tag){case 3:o=s,f.flags|=4096,t&=-t,f.lanes|=t,co(f,sl(0,o,t));break e;case 1:o=s;var E=f.type,w=f.stateNode;if(0==(64&f.flags)&&("function"==typeof E.getDerivedStateFromError||null!==w&&"function"==typeof w.componentDidCatch&&(null===Yl||!Yl.has(w)))){f.flags|=4096,t&=-t,f.lanes|=t,co(f,ul(f,o,t));break e}}f=f.return}while(null!==f)}xs(n)}catch(e){t=e,jl===n&&null!==n&&(jl=n=n.return);continue}break}}function ys(){var e=Ol.current;return Ol.current=ji,null===e?ji:e}function Es(e,t){var n=Cl;Cl|=16;var r=ys();for(Pl===e&&Ll===t||vs(e,t);;)try{ws();break}catch(t){bs(e,t)}if(eo(),Cl=n,Ol.current=r,null!==jl)throw Error(i(261));return Pl=null,Ll=0,Ml}function ws(){for(;null!==jl;)Ss(jl)}function ks(){for(;null!==jl&&!Oa();)Ss(jl)}function Ss(e){var t=Hl(e.alternate,e,Bl);e.memoizedProps=e.pendingProps,null===t?xs(e):jl=t,_l.current=null}function xs(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(2048&t.flags)){if(null!==(n=rl(n,t,Bl)))return void(jl=n);if(24!==(n=t).tag&&23!==n.tag||null===n.memoizedState||0!=(1073741824&Bl)||0==(4&n.mode)){for(var r=0,a=n.child;null!==a;)r|=a.lanes|a.childLanes,a=a.sibling;n.childLanes=r}null!==e&&0==(2048&e.flags)&&(null===e.firstEffect&&(e.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=t.firstEffect),e.lastEffect=t.lastEffect),1<t.flags&&(null!==e.lastEffect?e.lastEffect.nextEffect=t:e.firstEffect=t,e.lastEffect=t))}else{if(null!==(n=al(t)))return n.flags&=2047,void(jl=n);null!==e&&(e.firstEffect=e.lastEffect=null,e.flags|=2048)}if(null!==(t=t.sibling))return void(jl=t);jl=t=e}while(null!==t);0===Ml&&(Ml=5)}function Os(e){var t=Va();return Ha(99,_s.bind(null,e,t)),null}function _s(e,t){do{Ps()}while(null!==Gl);if(0!=(48&Cl))throw Error(i(327));var n=e.finishedWork;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(i(177));e.callbackNode=null;var r=n.lanes|n.childLanes,a=r,o=e.pendingLanes&~a;e.pendingLanes=a,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=a,e.mutableReadLanes&=a,e.entangledLanes&=a,a=e.entanglements;for(var l=e.eventTimes,s=e.expirationTimes;0<o;){var u=31-Vt(o),c=1<<u;a[u]=0,l[u]=-1,s[u]=-1,o&=~c}if(null!==es&&0==(24&r)&&es.has(e)&&es.delete(e),e===Pl&&(jl=Pl=null,Ll=0),1<n.flags?null!==n.lastEffect?(n.lastEffect.nextEffect=n,r=n.firstEffect):r=n:r=n.firstEffect,null!==r){if(a=Cl,Cl|=32,_l.current=null,zr=Qt,Ar(l=hr())){if("selectionStart"in l)s={start:l.selectionStart,end:l.selectionEnd};else e:if(s=(s=l.ownerDocument)&&s.defaultView||window,(c=s.getSelection&&s.getSelection())&&0!==c.rangeCount){s=c.anchorNode,o=c.anchorOffset,u=c.focusNode,c=c.focusOffset;try{s.nodeType,u.nodeType}catch(e){s=null;break e}var d=0,f=-1,p=-1,h=0,A=0,m=l,g=null;t:for(;;){for(var v;m!==s||0!==o&&3!==m.nodeType||(f=d+o),m!==u||0!==c&&3!==m.nodeType||(p=d+c),3===m.nodeType&&(d+=m.nodeValue.length),null!==(v=m.firstChild);)g=m,m=v;for(;;){if(m===l)break t;if(g===s&&++h===o&&(f=d),g===u&&++A===c&&(p=d),null!==(v=m.nextSibling))break;g=(m=g).parentNode}m=v}s=-1===f||-1===p?null:{start:f,end:p}}else s=null;s=s||{start:0,end:0}}else s=null;Ur={focusedElem:l,selectionRange:s},Qt=!1,is=null,ls=!1,ql=r;do{try{Cs()}catch(e){if(null===ql)throw Error(i(330));Ms(ql,e),ql=ql.nextEffect}}while(null!==ql);is=null,ql=r;do{try{for(l=e;null!==ql;){var b=ql.flags;if(16&b&&ge(ql.stateNode,""),128&b){var y=ql.alternate;if(null!==y){var E=y.ref;null!==E&&("function"==typeof E?E(null):E.current=null)}}switch(1038&b){case 2:vl(ql),ql.flags&=-3;break;case 6:vl(ql),ql.flags&=-3,wl(ql.alternate,ql);break;case 1024:ql.flags&=-1025;break;case 1028:ql.flags&=-1025,wl(ql.alternate,ql);break;case 4:wl(ql.alternate,ql);break;case 8:El(l,s=ql);var w=s.alternate;ml(s),null!==w&&ml(w)}ql=ql.nextEffect}}catch(e){if(null===ql)throw Error(i(330));Ms(ql,e),ql=ql.nextEffect}}while(null!==ql);if(E=Ur,y=hr(),b=E.focusedElem,l=E.selectionRange,y!==b&&b&&b.ownerDocument&&pr(b.ownerDocument.documentElement,b)){null!==l&&Ar(b)&&(y=l.start,void 0===(E=l.end)&&(E=y),"selectionStart"in b?(b.selectionStart=y,b.selectionEnd=Math.min(E,b.value.length)):(E=(y=b.ownerDocument||document)&&y.defaultView||window).getSelection&&(E=E.getSelection(),s=b.textContent.length,w=Math.min(l.start,s),l=void 0===l.end?w:Math.min(l.end,s),!E.extend&&w>l&&(s=l,l=w,w=s),s=fr(b,w),o=fr(b,l),s&&o&&(1!==E.rangeCount||E.anchorNode!==s.node||E.anchorOffset!==s.offset||E.focusNode!==o.node||E.focusOffset!==o.offset)&&((y=y.createRange()).setStart(s.node,s.offset),E.removeAllRanges(),w>l?(E.addRange(y),E.extend(o.node,o.offset)):(y.setEnd(o.node,o.offset),E.addRange(y))))),y=[];for(E=b;E=E.parentNode;)1===E.nodeType&&y.push({element:E,left:E.scrollLeft,top:E.scrollTop});for("function"==typeof b.focus&&b.focus(),b=0;b<y.length;b++)(E=y[b]).element.scrollLeft=E.left,E.element.scrollTop=E.top}Qt=!!zr,Ur=zr=null,e.current=n,ql=r;do{try{for(b=e;null!==ql;){var k=ql.flags;if(36&k&&pl(b,ql.alternate,ql),128&k){y=void 0;var S=ql.ref;if(null!==S){var x=ql.stateNode;ql.tag,y=x,"function"==typeof S?S(y):S.current=y}}ql=ql.nextEffect}}catch(e){if(null===ql)throw Error(i(330));Ms(ql,e),ql=ql.nextEffect}}while(null!==ql);ql=null,Na(),Cl=a}else e.current=n;if(Kl)Kl=!1,Gl=e,Xl=t;else for(ql=r;null!==ql;)t=ql.nextEffect,ql.nextEffect=null,8&ql.flags&&((k=ql).sibling=null,k.stateNode=null),ql=t;if(0===(r=e.pendingLanes)&&(Yl=null),1===r?e===ns?ts++:(ts=0,ns=e):ts=0,n=n.stateNode,wa&&"function"==typeof wa.onCommitFiberRoot)try{wa.onCommitFiberRoot(Ea,n,void 0,64==(64&n.current.flags))}catch(e){}if(fs(e,Da()),$l)throw $l=!1,e=Ql,Ql=null,e;return 0!=(8&Cl)||$a(),null}function Cs(){for(;null!==ql;){var e=ql.alternate;ls||null===is||(0!=(8&ql.flags)?Je(ql,is)&&(ls=!0):13===ql.tag&&Sl(e,ql)&&Je(ql,is)&&(ls=!0));var t=ql.flags;0!=(256&t)&&fl(e,ql),0==(512&t)||Kl||(Kl=!0,qa(97,(function(){return Ps(),null}))),ql=ql.nextEffect}}function Ps(){if(90!==Xl){var e=97<Xl?97:Xl;return Xl=90,Ha(e,Bs)}return!1}function js(e,t){Jl.push(t,e),Kl||(Kl=!0,qa(97,(function(){return Ps(),null})))}function Ls(e,t){Zl.push(t,e),Kl||(Kl=!0,qa(97,(function(){return Ps(),null})))}function Bs(){if(null===Gl)return!1;var e=Gl;if(Gl=null,0!=(48&Cl))throw Error(i(331));var t=Cl;Cl|=32;var n=Zl;Zl=[];for(var r=0;r<n.length;r+=2){var a=n[r],o=n[r+1],l=a.destroy;if(a.destroy=void 0,"function"==typeof l)try{l()}catch(e){if(null===o)throw Error(i(330));Ms(o,e)}}for(n=Jl,Jl=[],r=0;r<n.length;r+=2){a=n[r],o=n[r+1];try{var s=a.create;a.destroy=s()}catch(e){if(null===o)throw Error(i(330));Ms(o,e)}}for(s=e.current.firstEffect;null!==s;)e=s.nextEffect,s.nextEffect=null,8&s.flags&&(s.sibling=null,s.stateNode=null),s=e;return Cl=t,$a(),!0}function Ts(e,t,n){uo(e,t=sl(0,t=ol(n,t),1)),t=ss(),null!==(e=ds(e,1))&&(Dt(e,1,t),fs(e,t))}function Ms(e,t){if(3===e.tag)Ts(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){Ts(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Yl||!Yl.has(r))){var a=ul(n,e=ol(t,e),1);if(uo(n,a),a=ss(),null!==(n=ds(n,1)))Dt(n,1,a),fs(n,a);else if("function"==typeof r.componentDidCatch&&(null===Yl||!Yl.has(r)))try{r.componentDidCatch(t,e)}catch(e){}break}}n=n.return}}function Rs(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=ss(),e.pingedLanes|=e.suspendedLanes&n,Pl===e&&(Ll&n)===n&&(4===Ml||3===Ml&&(62914560&Ll)===Ll&&500>Da()-Dl?vs(e,0):zl|=n),fs(e,t)}function Ns(e,t){var n=e.stateNode;null!==n&&n.delete(t),0==(t=0)&&(0==(2&(t=e.mode))?t=1:0==(4&t)?t=99===Va()?1:2:(0===as&&(as=Nl),0===(t=zt(62914560&~as))&&(t=4194304))),n=ss(),null!==(e=ds(e,t))&&(Dt(e,t,n),fs(e,n))}function Fs(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function Is(e,t,n,r){return new Fs(e,t,n,r)}function zs(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Us(e,t){var n=e.alternate;return null===n?((n=Is(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Ds(e,t,n,r,a,o){var l=2;if(r=e,"function"==typeof e)zs(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case S:return Vs(n.children,a,o,t);case N:l=8,a|=16;break;case x:l=8,a|=1;break;case O:return(e=Is(12,n,t,8|a)).elementType=O,e.type=O,e.lanes=o,e;case j:return(e=Is(13,n,t,a)).type=j,e.elementType=j,e.lanes=o,e;case L:return(e=Is(19,n,t,a)).elementType=L,e.lanes=o,e;case F:return Ws(n,a,o,t);case I:return(e=Is(24,n,t,a)).elementType=I,e.lanes=o,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case _:l=10;break e;case C:l=9;break e;case P:l=11;break e;case B:l=14;break e;case T:l=16,r=null;break e;case M:l=22;break e}throw Error(i(130,null==e?e:typeof e,""))}return(t=Is(l,n,t,a)).elementType=e,t.type=r,t.lanes=o,t}function Vs(e,t,n,r){return(e=Is(7,e,r,t)).lanes=n,e}function Ws(e,t,n,r){return(e=Is(23,e,r,t)).elementType=F,e.lanes=n,e}function Hs(e,t,n){return(e=Is(6,e,null,t)).lanes=n,e}function qs(e,t,n){return(t=Is(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function $s(e,t,n){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=Ut(0),this.expirationTimes=Ut(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Ut(0),this.mutableSourceEagerHydrationData=null}function Qs(e,t,n,r){var a=t.current,o=ss(),l=us(a);e:if(n){t:{if(Ke(n=n._reactInternals)!==n||1!==n.tag)throw Error(i(170));var s=n;do{switch(s.tag){case 3:s=s.stateNode.context;break t;case 1:if(Aa(s.type)){s=s.stateNode.__reactInternalMemoizedMergedChildContext;break t}}s=s.return}while(null!==s);throw Error(i(171))}if(1===n.tag){var u=n.type;if(Aa(u)){n=va(n,u,s);break e}}n=s}else n=ca;return null===t.context?t.context=n:t.pendingContext=n,(t=so(o,l)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),uo(a,t),cs(a,l,o),l}function Ys(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Ks(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Gs(e,t){Ks(e,t),(e=e.alternate)&&Ks(e,t)}function Xs(e,t,n){var r=null!=n&&null!=n.hydrationOptions&&n.hydrationOptions.mutableSources||null;if(n=new $s(e,t,null!=n&&!0===n.hydrate),t=Is(3,null,null,2===t?7:1===t?3:0),n.current=t,t.stateNode=n,io(t),e[Jr]=n.current,jr(8===e.nodeType?e.parentNode:e),r)for(e=0;e<r.length;e++){var a=(t=r[e])._getVersion;a=a(t._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[t,a]:n.mutableSourceEagerHydrationData.push(t,a)}this._internalRoot=n}function Js(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Zs(e,t,n,r,a){var o=n._reactRootContainer;if(o){var i=o._internalRoot;if("function"==typeof a){var l=a;a=function(){var e=Ys(i);l.call(e)}}Qs(t,i,e,a)}else{if(o=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Xs(e,0,t?{hydrate:!0}:void 0)}(n,r),i=o._internalRoot,"function"==typeof a){var s=a;a=function(){var e=Ys(i);s.call(e)}}!function(e,t){var n=Cl;Cl&=-2,Cl|=8;try{e(t)}finally{0===(Cl=n)&&(Wl(),$a())}}((function(){Qs(t,i,e,a)}))}return Ys(i)}Hl=function(e,t,n){var r=t.lanes;if(null!==e)if(e.memoizedProps!==t.pendingProps||fa.current)Ri=!0;else{if(0==(n&r)){switch(Ri=!1,t.tag){case 3:qi(t),$o();break;case 5:Mo(t);break;case 1:Aa(t.type)&&ba(t);break;case 4:Bo(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value;var a=t.type._context;ua(Ga,a._currentValue),a._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!=(n&t.child.childLanes)?Gi(e,t,n):(ua(No,1&No.current),null!==(t=tl(e,t,n))?t.sibling:null);ua(No,1&No.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(64&e.flags)){if(r)return el(e,t,n);t.flags|=64}if(null!==(a=t.memoizedState)&&(a.rendering=null,a.tail=null,a.lastEffect=null),ua(No,No.current),r)break;return null;case 23:case 24:return t.lanes=0,Ui(e,t,n)}return tl(e,t,n)}Ri=0!=(16384&e.flags)}else Ri=!1;switch(t.lanes=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,a=ha(t,da.current),ro(t,n),a=oi(null,t,r,e,a,n),t.flags|=1,"object"==typeof a&&null!==a&&"function"==typeof a.render&&void 0===a.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,Aa(r)){var o=!0;ba(t)}else o=!1;t.memoizedState=null!==a.state&&void 0!==a.state?a.state:null,io(t);var l=r.getDerivedStateFromProps;"function"==typeof l&&Ao(t,r,l,e),a.updater=mo,t.stateNode=a,a._reactInternals=t,yo(t,r,e,n),t=Hi(null,t,r,!0,o,n)}else t.tag=0,Ni(null,t,a,n),t=t.child;return t;case 16:a=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,a=(o=a._init)(a._payload),t.type=a,o=t.tag=function(e){if("function"==typeof e)return zs(e)?1:0;if(null!=e){if((e=e.$$typeof)===P)return 11;if(e===B)return 14}return 2}(a),e=Ka(a,e),o){case 0:t=Vi(null,t,a,e,n);break e;case 1:t=Wi(null,t,a,e,n);break e;case 11:t=Fi(null,t,a,e,n);break e;case 14:t=Ii(null,t,a,Ka(a.type,e),r,n);break e}throw Error(i(306,a,""))}return t;case 0:return r=t.type,a=t.pendingProps,Vi(e,t,r,a=t.elementType===r?a:Ka(r,a),n);case 1:return r=t.type,a=t.pendingProps,Wi(e,t,r,a=t.elementType===r?a:Ka(r,a),n);case 3:if(qi(t),r=t.updateQueue,null===e||null===r)throw Error(i(282));if(r=t.pendingProps,a=null!==(a=t.memoizedState)?a.element:null,lo(e,t),fo(t,r,null,n),(r=t.memoizedState.element)===a)$o(),t=tl(e,t,n);else{if((o=(a=t.stateNode).hydrate)&&(zo=$r(t.stateNode.containerInfo.firstChild),Io=t,o=Uo=!0),o){if(null!=(e=a.mutableSourceEagerHydrationData))for(a=0;a<e.length;a+=2)(o=e[a])._workInProgressVersionPrimary=e[a+1],Qo.push(o);for(n=Oo(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|1024,n=n.sibling}else Ni(e,t,r,n),$o();t=t.child}return t;case 5:return Mo(t),null===e&&Wo(t),r=t.type,a=t.pendingProps,o=null!==e?e.memoizedProps:null,l=a.children,Vr(r,a)?l=null:null!==o&&Vr(r,o)&&(t.flags|=16),Di(e,t),Ni(e,t,l,n),t.child;case 6:return null===e&&Wo(t),null;case 13:return Gi(e,t,n);case 4:return Bo(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=xo(t,null,r,n):Ni(e,t,r,n),t.child;case 11:return r=t.type,a=t.pendingProps,Fi(e,t,r,a=t.elementType===r?a:Ka(r,a),n);case 7:return Ni(e,t,t.pendingProps,n),t.child;case 8:case 12:return Ni(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,a=t.pendingProps,l=t.memoizedProps,o=a.value;var s=t.type._context;if(ua(Ga,s._currentValue),s._currentValue=o,null!==l)if(s=l.value,0==(o=sr(s,o)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(s,o):1073741823))){if(l.children===a.children&&!fa.current){t=tl(e,t,n);break e}}else for(null!==(s=t.child)&&(s.return=t);null!==s;){var u=s.dependencies;if(null!==u){l=s.child;for(var c=u.firstContext;null!==c;){if(c.context===r&&0!=(c.observedBits&o)){1===s.tag&&((c=so(-1,n&-n)).tag=2,uo(s,c)),s.lanes|=n,null!==(c=s.alternate)&&(c.lanes|=n),no(s.return,n),u.lanes|=n;break}c=c.next}}else l=10===s.tag&&s.type===t.type?null:s.child;if(null!==l)l.return=s;else for(l=s;null!==l;){if(l===t){l=null;break}if(null!==(s=l.sibling)){s.return=l.return,l=s;break}l=l.return}s=l}Ni(e,t,a.children,n),t=t.child}return t;case 9:return a=t.type,r=(o=t.pendingProps).children,ro(t,n),r=r(a=ao(a,o.unstable_observedBits)),t.flags|=1,Ni(e,t,r,n),t.child;case 14:return o=Ka(a=t.type,t.pendingProps),Ii(e,t,a,o=Ka(a.type,o),r,n);case 15:return zi(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,a=t.pendingProps,a=t.elementType===r?a:Ka(r,a),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,Aa(r)?(e=!0,ba(t)):e=!1,ro(t,n),vo(t,r,a),yo(t,r,a,n),Hi(null,t,r,!0,e,n);case 19:return el(e,t,n);case 23:case 24:return Ui(e,t,n)}throw Error(i(156,t.tag))},Xs.prototype.render=function(e){Qs(e,this._internalRoot,null,null)},Xs.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Qs(null,e,null,(function(){t[Jr]=null}))},Ze=function(e){13===e.tag&&(cs(e,4,ss()),Gs(e,4))},et=function(e){13===e.tag&&(cs(e,67108864,ss()),Gs(e,67108864))},tt=function(e){if(13===e.tag){var t=ss(),n=us(e);cs(e,n,t),Gs(e,n)}},nt=function(e,t){return t()},Oe=function(e,t,n){switch(t){case"input":if(ne(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var a=ra(r);if(!a)throw Error(i(90));X(r),ne(r,a)}}}break;case"textarea":ue(e,n);break;case"select":null!=(t=n.value)&&ie(e,!!n.multiple,t,!1)}},Be=function(e,t){var n=Cl;Cl|=1;try{return e(t)}finally{0===(Cl=n)&&(Wl(),$a())}},Te=function(e,t,n,r,a){var o=Cl;Cl|=4;try{return Ha(98,e.bind(null,t,n,r,a))}finally{0===(Cl=o)&&(Wl(),$a())}},Me=function(){0==(49&Cl)&&(function(){if(null!==es){var e=es;es=null,e.forEach((function(e){e.expiredLanes|=24&e.pendingLanes,fs(e,Da())}))}$a()}(),Ps())},Re=function(e,t){var n=Cl;Cl|=2;try{return e(t)}finally{0===(Cl=n)&&(Wl(),$a())}};var eu={findFiberByHostInstance:ea,bundleType:0,version:"17.0.2",rendererPackageName:"react-dom"},tu={bundleType:eu.bundleType,version:eu.version,rendererPackageName:eu.rendererPackageName,rendererConfig:eu.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:E.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=function(e){if(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ke(e)))throw Error(i(188));return t!==e?null:e}for(var n=e,r=t;;){var a=n.return;if(null===a)break;var o=a.alternate;if(null===o){if(null!==(r=a.return)){n=r;continue}break}if(a.child===o.child){for(o=a.child;o;){if(o===n)return Xe(a),e;if(o===r)return Xe(a),t;o=o.sibling}throw Error(i(188))}if(n.return!==r.return)n=a,r=o;else{for(var l=!1,s=a.child;s;){if(s===n){l=!0,n=a,r=o;break}if(s===r){l=!0,r=a,n=o;break}s=s.sibling}if(!l){for(s=o.child;s;){if(s===n){l=!0,n=o,r=a;break}if(s===r){l=!0,r=o,n=a;break}s=s.sibling}if(!l)throw Error(i(189))}}if(n.alternate!==r)throw Error(i(190))}if(3!==n.tag)throw Error(i(188));return n.stateNode.current===n?e:t}(e),!e)return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}(e))?null:e.stateNode},findFiberByHostInstance:eu.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var nu=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!nu.isDisabled&&nu.supportsFiber)try{Ea=nu.inject(tu),wa=nu}catch(Ae){}}t.render=function(e,t,n){if(!Js(t))throw Error(i(200));return Zs(null,e,t,!1,n)}},3935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(4448)},5251:(e,t,n)=>{"use strict";n(7418);var r=n(7294),a=60103;if("function"==typeof Symbol&&Symbol.for){var o=Symbol.for;a=o("react.element"),o("react.fragment")}var i=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,l=Object.prototype.hasOwnProperty,s={key:!0,ref:!0,__self:!0,__source:!0};function u(e,t,n){var r,o={},u=null,c=null;for(r in void 0!==n&&(u=""+n),void 0!==t.key&&(u=""+t.key),void 0!==t.ref&&(c=t.ref),t)l.call(t,r)&&!s.hasOwnProperty(r)&&(o[r]=t[r]);if(e&&e.defaultProps)for(r in t=e.defaultProps)void 0===o[r]&&(o[r]=t[r]);return{$$typeof:a,type:e,key:u,ref:c,props:o,_owner:i.current}}t.jsx=u,t.jsxs=u},2408:(e,t,n)=>{"use strict";var r=n(7418),a=60103,o=60106;t.Fragment=60107,t.StrictMode=60108,t.Profiler=60114;var i=60109,l=60110,s=60112;t.Suspense=60113;var u=60115,c=60116;if("function"==typeof Symbol&&Symbol.for){var d=Symbol.for;a=d("react.element"),o=d("react.portal"),t.Fragment=d("react.fragment"),t.StrictMode=d("react.strict_mode"),t.Profiler=d("react.profiler"),i=d("react.provider"),l=d("react.context"),s=d("react.forward_ref"),t.Suspense=d("react.suspense"),u=d("react.memo"),c=d("react.lazy")}var f="function"==typeof Symbol&&Symbol.iterator;function p(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},A={};function m(e,t,n){this.props=e,this.context=t,this.refs=A,this.updater=n||h}function g(){}function v(e,t,n){this.props=e,this.context=t,this.refs=A,this.updater=n||h}m.prototype.isReactComponent={},m.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(p(85));this.updater.enqueueSetState(this,e,t,"setState")},m.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},g.prototype=m.prototype;var b=v.prototype=new g;b.constructor=v,r(b,m.prototype),b.isPureReactComponent=!0;var y={current:null},E=Object.prototype.hasOwnProperty,w={key:!0,ref:!0,__self:!0,__source:!0};function k(e,t,n){var r,o={},i=null,l=null;if(null!=t)for(r in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(i=""+t.key),t)E.call(t,r)&&!w.hasOwnProperty(r)&&(o[r]=t[r]);var s=arguments.length-2;if(1===s)o.children=n;else if(1<s){for(var u=Array(s),c=0;c<s;c++)u[c]=arguments[c+2];o.children=u}if(e&&e.defaultProps)for(r in s=e.defaultProps)void 0===o[r]&&(o[r]=s[r]);return{$$typeof:a,type:e,key:i,ref:l,props:o,_owner:y.current}}function S(e){return"object"==typeof e&&null!==e&&e.$$typeof===a}var x=/\/+/g;function O(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function _(e,t,n,r,i){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var s=!1;if(null===e)s=!0;else switch(l){case"string":case"number":s=!0;break;case"object":switch(e.$$typeof){case a:case o:s=!0}}if(s)return i=i(s=e),e=""===r?"."+O(s,0):r,Array.isArray(i)?(n="",null!=e&&(n=e.replace(x,"$&/")+"/"),_(i,t,n,"",(function(e){return e}))):null!=i&&(S(i)&&(i=function(e,t){return{$$typeof:a,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,n+(!i.key||s&&s.key===i.key?"":(""+i.key).replace(x,"$&/")+"/")+e)),t.push(i)),1;if(s=0,r=""===r?".":r+":",Array.isArray(e))for(var u=0;u<e.length;u++){var c=r+O(l=e[u],u);s+=_(l,t,n,c,i)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=f&&e[f]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),u=0;!(l=e.next()).done;)s+=_(l=l.value,t,n,c=r+O(l,u++),i);else if("object"===l)throw t=""+e,Error(p(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t));return s}function C(e,t,n){if(null==e)return e;var r=[],a=0;return _(e,r,"","",(function(e){return t.call(n,e,a++)})),r}function P(e){if(-1===e._status){var t=e._result;t=t(),e._status=0,e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}if(1===e._status)return e._result;throw e._result}var j={current:null};function L(){var e=j.current;if(null===e)throw Error(p(321));return e}var B={ReactCurrentDispatcher:j,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:y,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:C,forEach:function(e,t,n){C(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return C(e,(function(){t++})),t},toArray:function(e){return C(e,(function(e){return e}))||[]},only:function(e){if(!S(e))throw Error(p(143));return e}},t.Component=m,t.PureComponent=v,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=B,t.cloneElement=function(e,t,n){if(null==e)throw Error(p(267,e));var o=r({},e.props),i=e.key,l=e.ref,s=e._owner;if(null!=t){if(void 0!==t.ref&&(l=t.ref,s=y.current),void 0!==t.key&&(i=""+t.key),e.type&&e.type.defaultProps)var u=e.type.defaultProps;for(c in t)E.call(t,c)&&!w.hasOwnProperty(c)&&(o[c]=void 0===t[c]&&void 0!==u?u[c]:t[c])}var c=arguments.length-2;if(1===c)o.children=n;else if(1<c){u=Array(c);for(var d=0;d<c;d++)u[d]=arguments[d+2];o.children=u}return{$$typeof:a,type:e.type,key:i,ref:l,props:o,_owner:s}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:l,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:i,_context:e},e.Consumer=e},t.createElement=k,t.createFactory=function(e){var t=k.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:s,render:e}},t.isValidElement=S,t.lazy=function(e){return{$$typeof:c,_payload:{_status:-1,_result:e},_init:P}},t.memo=function(e,t){return{$$typeof:u,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return L().useCallback(e,t)},t.useContext=function(e,t){return L().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return L().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return L().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return L().useLayoutEffect(e,t)},t.useMemo=function(e,t){return L().useMemo(e,t)},t.useReducer=function(e,t,n){return L().useReducer(e,t,n)},t.useRef=function(e){return L().useRef(e)},t.useState=function(e){return L().useState(e)},t.version="17.0.2"},7294:(e,t,n)=>{"use strict";e.exports=n(2408)},5893:(e,t,n)=>{"use strict";e.exports=n(5251)},53:(e,t)=>{"use strict";var n,r,a,o;if("object"==typeof performance&&"function"==typeof performance.now){var i=performance;t.unstable_now=function(){return i.now()}}else{var l=Date,s=l.now();t.unstable_now=function(){return l.now()-s}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var u=null,c=null,d=function(){if(null!==u)try{var e=t.unstable_now();u(!0,e),u=null}catch(e){throw setTimeout(d,0),e}};n=function(e){null!==u?setTimeout(n,0,e):(u=e,setTimeout(d,0))},r=function(e,t){c=setTimeout(e,t)},a=function(){clearTimeout(c)},t.unstable_shouldYield=function(){return!1},o=t.unstable_forceFrameRate=function(){}}else{var f=window.setTimeout,p=window.clearTimeout;if("undefined"!=typeof console){var h=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof h&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var A=!1,m=null,g=-1,v=5,b=0;t.unstable_shouldYield=function(){return t.unstable_now()>=b},o=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):v=0<e?Math.floor(1e3/e):5};var y=new MessageChannel,E=y.port2;y.port1.onmessage=function(){if(null!==m){var e=t.unstable_now();b=e+v;try{m(!0,e)?E.postMessage(null):(A=!1,m=null)}catch(e){throw E.postMessage(null),e}}else A=!1},n=function(e){m=e,A||(A=!0,E.postMessage(null))},r=function(e,n){g=f((function(){e(t.unstable_now())}),n)},a=function(){p(g),g=-1}}function w(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,a=e[r];if(!(void 0!==a&&0<x(a,t)))break e;e[r]=t,e[n]=a,n=r}}function k(e){return void 0===(e=e[0])?null:e}function S(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,a=e.length;r<a;){var o=2*(r+1)-1,i=e[o],l=o+1,s=e[l];if(void 0!==i&&0>x(i,n))void 0!==s&&0>x(s,i)?(e[r]=s,e[l]=n,r=l):(e[r]=i,e[o]=n,r=o);else{if(!(void 0!==s&&0>x(s,n)))break e;e[r]=s,e[l]=n,r=l}}}return t}return null}function x(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var O=[],_=[],C=1,P=null,j=3,L=!1,B=!1,T=!1;function M(e){for(var t=k(_);null!==t;){if(null===t.callback)S(_);else{if(!(t.startTime<=e))break;S(_),t.sortIndex=t.expirationTime,w(O,t)}t=k(_)}}function R(e){if(T=!1,M(e),!B)if(null!==k(O))B=!0,n(N);else{var t=k(_);null!==t&&r(R,t.startTime-e)}}function N(e,n){B=!1,T&&(T=!1,a()),L=!0;var o=j;try{for(M(n),P=k(O);null!==P&&(!(P.expirationTime>n)||e&&!t.unstable_shouldYield());){var i=P.callback;if("function"==typeof i){P.callback=null,j=P.priorityLevel;var l=i(P.expirationTime<=n);n=t.unstable_now(),"function"==typeof l?P.callback=l:P===k(O)&&S(O),M(n)}else S(O);P=k(O)}if(null!==P)var s=!0;else{var u=k(_);null!==u&&r(R,u.startTime-n),s=!1}return s}finally{P=null,j=o,L=!1}}var F=o;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){B||L||(B=!0,n(N))},t.unstable_getCurrentPriorityLevel=function(){return j},t.unstable_getFirstCallbackNode=function(){return k(O)},t.unstable_next=function(e){switch(j){case 1:case 2:case 3:var t=3;break;default:t=j}var n=j;j=t;try{return e()}finally{j=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=F,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=j;j=e;try{return t()}finally{j=n}},t.unstable_scheduleCallback=function(e,o,i){var l=t.unstable_now();switch(i="object"==typeof i&&null!==i&&"number"==typeof(i=i.delay)&&0<i?l+i:l,e){case 1:var s=-1;break;case 2:s=250;break;case 5:s=1073741823;break;case 4:s=1e4;break;default:s=5e3}return e={id:C++,callback:o,priorityLevel:e,startTime:i,expirationTime:s=i+s,sortIndex:-1},i>l?(e.sortIndex=i,w(_,e),null===k(O)&&e===k(_)&&(T?a():T=!0,r(R,i-l))):(e.sortIndex=s,w(O,e),B||L||(B=!0,n(N))),e},t.unstable_wrapCallback=function(e){var t=j;return function(){var n=j;j=t;try{return e.apply(this,arguments)}finally{j=n}}}},3840:(e,t,n)=>{"use strict";e.exports=n(53)},3379:e=>{"use strict";var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var o={},i=[],l=0;l<e.length;l++){var s=e[l],u=r.base?s[0]+r.base:s[0],c=o[u]||0,d="".concat(u," ").concat(c);o[u]=c+1;var f=n(d),p={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==f)t[f].references++,t[f].updater(p);else{var h=a(p,r);r.byIndex=l,t.splice(l,0,{identifier:d,updater:h,references:1})}i.push(d)}return i}function a(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,a){var o=r(e=e||[],a=a||{});return function(e){e=e||[];for(var i=0;i<o.length;i++){var l=n(o[i]);t[l].references--}for(var s=r(e,a),u=0;u<o.length;u++){var c=n(o[u]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}o=s}}},569:e=>{"use strict";var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},9216:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},3565:(e,t,n)=>{"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},7795:e=>{"use strict";e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,a&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},4589:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},2811:e=>{"use strict";e.exports=JSON.parse('{"name":"openai","version":"3.1.0","description":"Node.js library for the OpenAI API","repository":{"type":"git","url":"git@github.com:openai/openai-node.git"},"keywords":["openai","open","ai","gpt-3","gpt3"],"author":"OpenAI","license":"MIT","main":"./dist/index.js","types":"./dist/index.d.ts","scripts":{"build":"tsc --outDir dist/"},"dependencies":{"axios":"^0.26.0","form-data":"^4.0.0"},"devDependencies":{"@types/node":"^12.11.5","typescript":"^3.6.4"}}')}},t={};function n(r){var a=t[r];if(void 0!==a)return a.exports;var o=t[r]={id:r,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{"use strict";var e=n(5893),t=n(3935),r=n(7294);const a={HEADER_WARNING:1,HEADER_CONTROL:2,SETTINGS_PANEL:100,SETTINGS_API:[101,102],MAIN:200,MAIN_INPUT:201,FOOTER:300},o=function(t){var n=t.value,o=t.onChange,i=t.width,l=void 0===i?"w-full":i,s=(0,r.useCallback)((function(e){o(e.target.value)}),[o]);return(0,e.jsx)("textarea",{tabIndex:a.MAIN_INPUT,className:"".concat(l," h-full p-2 resize-none rounded"),value:n,onChange:s})};var i=function(){return i=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},i.apply(this,arguments)};const l=function(){return(0,e.jsx)("footer",i({tabIndex:a.FOOTER,className:"w-full h-20 bg-gray-800 flex flex-col p-4 text-gray-300"},{children:(0,e.jsxs)("div",i({className:"flex flex-row justify-between w-full"},{children:[(0,e.jsx)("h5",{children:"Distributed under MIT License"}),(0,e.jsx)("h5",{children:"Copyright LoisoCrow, 2023"})]}))}))};var s=(0,r.createContext)({color:"currentColor",size:"1em",weight:"regular",mirrored:!1}),u=function(e,t,n){var r=n.get(e);return r?r(t):(console.error('Unsupported icon weight. Choose from "thin", "light", "regular", "bold", "fill", or "duotone".'),null)};function c(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}var d=(0,r.forwardRef)((function(e,t){var n=e.alt,a=e.color,o=e.size,i=e.weight,l=e.mirrored,u=e.children,d=e.renderPath,f=c(e,["alt","color","size","weight","mirrored","children","renderPath"]),p=(0,r.useContext)(s),h=p.color,A=void 0===h?"currentColor":h,m=p.size,g=p.weight,v=void 0===g?"regular":g,b=p.mirrored,y=void 0!==b&&b,E=c(p,["color","size","weight","mirrored"]);return r.createElement("svg",Object.assign({ref:t,xmlns:"http://www.w3.org/2000/svg",width:null!=o?o:m,height:null!=o?o:m,fill:null!=a?a:A,viewBox:"0 0 256 256",transform:l||y?"scale(-1, 1)":void 0},E,f),!!n&&r.createElement("title",null,n),u,r.createElement("rect",{width:"256",height:"256",fill:"none"}),d(null!=i?i:v,null!=a?a:A))}));d.displayName="IconBase";const f=d;var p=new Map;p.set("bold",(function(e){return r.createElement(r.Fragment,null,r.createElement("polyline",{points:"48 160 128 80 208 160",fill:"none",stroke:e,strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"24"}))})),p.set("duotone",(function(e){return r.createElement(r.Fragment,null,r.createElement("polygon",{points:"48 160 128 80 208 160 48 160",opacity:"0.2"}),r.createElement("polygon",{points:"48 160 128 80 208 160 48 160",fill:"none",stroke:e,strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"16"}))})),p.set("fill",(function(){return r.createElement(r.Fragment,null,r.createElement("path",{d:"M213.7,154.3l-80-80a8.1,8.1,0,0,0-11.4,0l-80,80a8.4,8.4,0,0,0-1.7,8.8A8,8,0,0,0,48,168H208a8,8,0,0,0,7.4-4.9A8.4,8.4,0,0,0,213.7,154.3Z"}))})),p.set("light",(function(e){return r.createElement(r.Fragment,null,r.createElement("polyline",{points:"48 160 128 80 208 160",fill:"none",stroke:e,strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"12"}))})),p.set("thin",(function(e){return r.createElement(r.Fragment,null,r.createElement("polyline",{points:"48 160 128 80 208 160",fill:"none",stroke:e,strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"8"}))})),p.set("regular",(function(e){return r.createElement(r.Fragment,null,r.createElement("polyline",{points:"48 160 128 80 208 160",fill:"none",stroke:e,strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"16"}))}));var h=function(e,t){return u(e,t,p)},A=(0,r.forwardRef)((function(e,t){return r.createElement(f,Object.assign({ref:t},e,{renderPath:h}))}));A.displayName="CaretUp";const m=A;var g=new Map;g.set("bold",(function(e){return r.createElement(r.Fragment,null,r.createElement("polyline",{points:"208 96 128 176 48 96",fill:"none",stroke:e,strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"24"}))})),g.set("duotone",(function(e){return r.createElement(r.Fragment,null,r.createElement("polygon",{points:"208 96 128 176 48 96 208 96",opacity:"0.2"}),r.createElement("polygon",{points:"208 96 128 176 48 96 208 96",fill:"none",stroke:e,strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"16"}))})),g.set("fill",(function(){return r.createElement(r.Fragment,null,r.createElement("path",{d:"M215.4,92.9A8,8,0,0,0,208,88H48a8,8,0,0,0-7.4,4.9,8.4,8.4,0,0,0,1.7,8.8l80,80a8.2,8.2,0,0,0,11.4,0l80-80A8.4,8.4,0,0,0,215.4,92.9Z"}))})),g.set("light",(function(e){return r.createElement(r.Fragment,null,r.createElement("polyline",{points:"208 96 128 176 48 96",fill:"none",stroke:e,strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"12"}))})),g.set("thin",(function(e){return r.createElement(r.Fragment,null,r.createElement("polyline",{points:"208 96 128 176 48 96",fill:"none",stroke:e,strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"8"}))})),g.set("regular",(function(e){return r.createElement(r.Fragment,null,r.createElement("polyline",{points:"208 96 128 176 48 96",fill:"none",stroke:e,strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"16"}))}));var v=function(e,t){return u(e,t,g)},b=(0,r.forwardRef)((function(e,t){return r.createElement(f,Object.assign({ref:t},e,{renderPath:v}))}));b.displayName="CaretDown";const y=b;var E=function(){return E=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},E.apply(this,arguments)};const w=function(t){var n=t.value,a=t.onChange,o=t.label,i=t.name,l=t.id,s=void 0===l?i:l,u=t.className,c=void 0===u?"":u,d=t.tabIndex,f=void 0===d?[0,0]:d,p=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(r=Object.getOwnPropertySymbols(e);a<r.length;a++)t.indexOf(r[a])<0&&Object.prototype.propertyIsEnumerable.call(e,r[a])&&(n[r[a]]=e[r[a]])}return n}(t,["value","onChange","label","name","id","className","tabIndex"]),h=(0,r.useCallback)((function(e){a(e.target.value)}),[]);return(0,e.jsxs)("div",E({className:"flex flex-col gap-1 ".concat(c)},{children:[o?(0,e.jsx)("label",E({tabIndex:f.length>1?f[0]:0,className:"text-xs",htmlFor:s},{children:o})):null,(0,e.jsx)("input",E({id:s,name:i,type:"text",className:"p-1 text-xs rounded-sm w-full text-gray-900",value:n,onChange:h,tabIndex:f.length>1?f[1]:f[0]},p))]}))};var k=function(){return k=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},k.apply(this,arguments)},S=(0,r.createContext)({settings:{},setSettings:function(){return null}}),x=function(t){var n=t.settings,r=t.children,a=t.setSettings;return(0,e.jsx)(S.Provider,k({value:{setSettings:a,settings:n}},{children:r}))},O=function(){var e=(0,r.useContext)(S);if(!e)throw new Error("useSettings must be used within a SettingsProvider");return[e.settings,e.setSettings]},_=function(){return _=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},_.apply(this,arguments)};const C=function(){var t=O(),n=t[0],o=t[1],i=(0,r.useCallback)((function(e){return function(t){var r;o(_(_({},n),((r={})[e]=t,r)))}}),[o,n]);return(0,e.jsx)("section",_({"aria-label":"Settings",tabIndex:a.SETTINGS_PANEL,className:"grid grid-cols-4 grid-rows-2 w-full bg-gray-700 text-white p-4 gap-4 items-center"},{children:(0,e.jsx)(w,{name:"APIKey",label:"API Key",className:"col-span-2",value:n.apiKey||"",onChange:i("apiKey"),tabIndex:a.SETTINGS_API})}))};var P=function(){return P=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},P.apply(this,arguments)};const j=function(){var t=(0,r.useState)(!1),n=t[0],o=t[1],i=O()[0],l=(0,r.useCallback)((function(){o(!n)}),[n]);return(0,e.jsxs)("header",P({className:"w-full "},{children:[(0,e.jsxs)("button",P({tabIndex:a.HEADER_CONTROL,className:"w-full h-10 bg-gray-800 flex flex-row px-4 py-2 justify-center gap-4 select-none items-center text-gray-300 relative",onClick:l,"aria-label":"Expands and collapses the settings menu"},{children:[i.apiKey?null:(0,e.jsx)("h5",P({className:"absolute left-4 top-1/2 translate-y-[-50%] text-gray-300",tabIndex:a.HEADER_WARNING,role:"alert"},{children:"Warning: no API Key provided."})),(0,e.jsx)("h1",{children:"Settings"}),n?(0,e.jsx)(m,{weight:"bold"}):(0,e.jsx)(y,{weight:"bold"})]})),n?(0,e.jsx)(C,{}):null]}))};var L=n(6485);const B={apiKey:"MISSING_ENV_VAR".API_KEY||"",model:"MISSING_ENV_VAR".MODEL||"text-davinci-003",temperature:"MISSING_ENV_VAR".TEMPERATURE?parseFloat("MISSING_ENV_VAR".TEMPERATURE):.9,max_tokens:"MISSING_ENV_VAR".MAX_TOKENS?parseFloat("MISSING_ENV_VAR".MAX_TOKENS):1e3,top_p:"MISSING_ENV_VAR".TOP_P?parseFloat("MISSING_ENV_VAR".TOP_P):1,frequency_penalty:"MISSING_ENV_VAR".FREQ_PEN?parseFloat("MISSING_ENV_VAR".FREQ_PEN):0,presence_penalty:"MISSING_ENV_VAR".PRES_PEN?parseFloat("MISSING_ENV_VAR".PRES_PEN):.6,stop:["Human:","AI:"]};var T=function(e,t,n){return r=void 0,a=void 0,i=function(){var r,a,o,i,l,s,u,c,d,f,p,h,A,m,g,v,b;return function(e,t){var n,r,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function l(o){return function(l){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,r&&(a=2&o[0]?r.return:o[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,o[1])).done)return a;switch(r=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,r=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!((a=(a=i.trys).length>0&&a[a.length-1])||6!==o[0]&&2!==o[0])){i=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){i.label=o[1];break}if(6===o[0]&&i.label<a[1]){i.label=a[1],a=o;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(o);break}a[2]&&i.ops.pop(),i.trys.pop();continue}o=t.call(e,i)}catch(e){o=[6,e],r=0}finally{n=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,l])}}}(this,(function(y){switch(y.label){case 0:return r=n.model,a=void 0===r?B.model:r,o=n.temperature,i=void 0===o?B.temperature:o,l=n.max_tokens,s=void 0===l?B.max_tokens:l,u=n.top_p,c=void 0===u?B.top_p:u,d=n.frequency_penalty,f=void 0===d?B.frequency_penalty:d,p=n.presence_penalty,h=void 0===p?B.presence_penalty:p,A=n.stop,m=void 0===A?B.stop:A,[4,e.createCompletion({model:a,prompt:t,temperature:i,max_tokens:s,top_p:c,frequency_penalty:f,presence_penalty:h,stop:m})];case 1:return g=y.sent(),[2,null===(b=null===(v=g.data)||void 0===v?void 0:v.choices[0])||void 0===b?void 0:b.text]}}))},new((o=void 0)||(o=Promise))((function(e,t){function n(e){try{s(i.next(e))}catch(e){t(e)}}function l(e){try{s(i.throw(e))}catch(e){t(e)}}function s(t){var r;t.done?e(t.value):(r=t.value,r instanceof o?r:new o((function(e){e(r)}))).then(n,l)}s((i=i.apply(r,a||[])).next())}));var r,a,o,i},M=function(){return M=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},M.apply(this,arguments)},R=function(e,t,n){if(n||2===arguments.length)for(var r,a=0,o=t.length;a<o;a++)!r&&a in t||(r||(r=Array.prototype.slice.call(t,0,a)),r[a]=t[a]);return e.concat(r||Array.prototype.slice.call(t))},N=(0,r.createContext)({chat:[],prompt:"",loading:!1,setPrompt:function(){return null},setChat:function(){return null},submitPrompt:function(){return null},setLoading:function(){return null}}),F=function(t){var n=t.children,a=t.chat,o=t.loading,i=t.setLoading,l=t.setPrompt,s=t.setChat,u=t.prompt,c=O()[0],d=(0,r.useState)(null),f=d[0],p=d[1];(0,r.useEffect)((function(){var e=new L.Configuration({apiKey:c.apiKey}),t=new L.OpenAIApi(e);p(t)}),[c.apiKey]);var h=(0,r.useCallback)((function(e){return t=void 0,n=void 0,o=function(){var t;return function(e,t){var n,r,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function l(o){return function(l){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,r&&(a=2&o[0]?r.return:o[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,o[1])).done)return a;switch(r=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,r=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!((a=(a=i.trys).length>0&&a[a.length-1])||6!==o[0]&&2!==o[0])){i=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){i.label=o[1];break}if(6===o[0]&&i.label<a[1]){i.label=a[1],a=o;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(o);break}a[2]&&i.ops.pop(),i.trys.pop();continue}o=t.call(e,i)}catch(e){o=[6,e],r=0}finally{n=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,l])}}}(this,(function(n){switch(n.label){case 0:return[4,T(f,a.reduce((function(e,t){return e+(t.ai?"\nAI: ":"\nHuman: ")+t.message}),"Don't include Human: or AI: in your responses.")+"\nHuman: "+e+"\nAI: ",c)];case 1:return t=n.sent(),s(R(R([],a,!0),[{ai:!1,message:e},{ai:!0,message:t}],!1)),i(!1),[2]}}))},new((r=void 0)||(r=Promise))((function(e,a){function i(e){try{s(o.next(e))}catch(e){a(e)}}function l(e){try{s(o.throw(e))}catch(e){a(e)}}function s(t){var n;t.done?e(t.value):(n=t.value,n instanceof r?n:new r((function(e){e(n)}))).then(i,l)}s((o=o.apply(t,n||[])).next())}));var t,n,r,o}),[f,c,s,a,i]),A=(0,r.useCallback)((function(){s(R(R([],a,!0),[{ai:!1,message:u}],!1)),i(!0),h(u),l("")}),[s,l,u,a,h,i]);return(0,e.jsx)(N.Provider,M({value:{chat:a,submitPrompt:A,setPrompt:l,prompt:u,setChat:s,loading:o,setLoading:i}},{children:n}))},I=new Map;I.set("bold",(function(e){return r.createElement(r.Fragment,null,r.createElement("line",{x1:"128",y1:"176",x2:"128",y2:"80",fill:"none",stroke:e,strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"24"}),r.createElement("path",{d:"M72,180H64A48,48,0,0,1,48,86.7V72a40,40,0,0,1,80,0V184",fill:"none",stroke:e,strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"24"}),r.createElement("path",{d:"M184,180h8a48,48,0,0,0,16-93.3V72a40,40,0,0,0-80,0",fill:"none",stroke:e,strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"24"}),r.createElement("path",{d:"M88,88v8a28,28,0,0,1-28,28",fill:"none",stroke:e,strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"24"}),r.createElement("path",{d:"M168,88v8a28,28,0,0,0,28,28",fill:"none",stroke:e,strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"24"}),r.createElement("path",{d:"M104,147.3A40,40,0,1,1,48,184v-6.7",fill:"none",stroke:e,strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"24"}),r.createElement("path",{d:"M152,147.3A40,40,0,1,0,208,184v-6.7",fill:"none",stroke:e,strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"24"}))})),I.set("duotone",(function(e){return r.createElement(r.Fragment,null,r.createElement("path",{d:"M208,86.7V72a40,40,0,0,0-80,0,40,40,0,0,0-80,0V86.7a48.1,48.1,0,0,0,0,90.6h0V184a40,40,0,0,0,80,0,40,40,0,0,0,80,0v-6.7h0a48.1,48.1,0,0,0,0-90.6Z",opacity:"0.2"}),r.createElement("line",{x1:"128",y1:"176",x2:"128",y2:"80",fill:"none",stroke:e,strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"16"}),r.createElement("path",{d:"M88,144a40,40,0,1,1-40,40v-6.7",fill:"none",stroke:e,strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"16"}),r.createElement("path",{d:"M168,144a40,40,0,1,0,40,40v-6.7",fill:"none",stroke:e,strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"16"}),r.createElement("path",{d:"M72,180H64A48,48,0,0,1,48,86.7V72a40,40,0,0,1,80,0V184",fill:"none",stroke:e,strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"16"}),r.createElement("path",{d:"M184,180h8a48,48,0,0,0,16-93.3V72a40,40,0,0,0-80,0",fill:"none",stroke:e,strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"16"}),r.createElement("path",{d:"M88,84v8a28,28,0,0,1-28,28",fill:"none",stroke:e,strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"16"}),r.createElement("path",{d:"M168,84v8a28,28,0,0,0,28,28",fill:"none",stroke:e,strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"16"}))})),I.set("fill",(function(){return r.createElement(r.Fragment,null,r.createElement("path",{d:"M248,132a56,56,0,0,0-32-50.6V72a48,48,0,0,0-88-26.5A48,48,0,0,0,40,72v9.4a56,56,0,0,0,0,101.2V184a48,48,0,0,0,88,26.5A48,48,0,0,0,216,184v-1.4A56.1,56.1,0,0,0,248,132ZM88,216a32,32,0,0,1-31.8-28.6,49.3,49.3,0,0,0,7.8.6h8a8,8,0,0,0,0-16H64A40,40,0,0,1,50.7,94.3,8.1,8.1,0,0,0,56,86.7V72a32,32,0,0,1,64,0v76.3A47.4,47.4,0,0,0,88,136a8,8,0,0,0,0,16,32,32,0,0,1,0,64Zm104-44h-8a8,8,0,0,0,0,16h8a49.3,49.3,0,0,0,7.8-.6A32,32,0,1,1,168,152a8,8,0,0,0,0-16,47.4,47.4,0,0,0-32,12.3V72a32,32,0,0,1,64,0V86.7a8.1,8.1,0,0,0,5.3,7.6A40,40,0,0,1,192,172ZM60,128a8,8,0,0,1,0-16A20.1,20.1,0,0,0,80,92V84a8,8,0,0,1,16,0v8A36,36,0,0,1,60,128Zm144-8a8,8,0,0,1-8,8,36,36,0,0,1-36-36V84a8,8,0,0,1,16,0v8a20.1,20.1,0,0,0,20,20A8,8,0,0,1,204,120Z"}))})),I.set("light",(function(e){return r.createElement(r.Fragment,null,r.createElement("line",{x1:"128",y1:"176",x2:"128",y2:"80",fill:"none",stroke:e,strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"12"}),r.createElement("path",{d:"M88,144a40,40,0,1,1-40,40v-6.7",fill:"none",stroke:e,strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"12"}),r.createElement("path",{d:"M168,144a40,40,0,1,0,40,40v-6.7",fill:"none",stroke:e,strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"12"}),r.createElement("path",{d:"M72,180H64A48,48,0,0,1,48,86.7V72a40,40,0,0,1,80,0V184",fill:"none",stroke:e,strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"12"}),r.createElement("path",{d:"M184,180h8a48,48,0,0,0,16-93.3V72a40,40,0,0,0-80,0",fill:"none",stroke:e,strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"12"}),r.createElement("path",{d:"M88,84v8a28,28,0,0,1-28,28",fill:"none",stroke:e,strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"12"}),r.createElement("path",{d:"M168,84v8a28,28,0,0,0,28,28",fill:"none",stroke:e,strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"12"}))})),I.set("thin",(function(e){return r.createElement(r.Fragment,null,r.createElement("line",{x1:"128",y1:"176",x2:"128",y2:"80",fill:"none",stroke:e,strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"8"}),r.createElement("path",{d:"M88,144a40,40,0,1,1-40,40v-6.7",fill:"none",stroke:e,strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"8"}),r.createElement("path",{d:"M168,144a40,40,0,1,0,40,40v-6.7",fill:"none",stroke:e,strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"8"}),r.createElement("path",{d:"M72,180H64A48,48,0,0,1,48,86.7V72a40,40,0,0,1,80,0V184",fill:"none",stroke:e,strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"8"}),r.createElement("path",{d:"M184,180h8a48,48,0,0,0,16-93.3V72a40,40,0,0,0-80,0",fill:"none",stroke:e,strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"8"}),r.createElement("path",{d:"M88,84v8a28,28,0,0,1-28,28",fill:"none",stroke:e,strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"8"}),r.createElement("path",{d:"M168,84v8a28,28,0,0,0,28,28",fill:"none",stroke:e,strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"8"}))})),I.set("regular",(function(e){return r.createElement(r.Fragment,null,r.createElement("line",{x1:"128",y1:"176",x2:"128",y2:"80",fill:"none",stroke:e,strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"16"}),r.createElement("path",{d:"M88,144a40,40,0,1,1-40,40v-6.7",fill:"none",stroke:e,strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"16"}),r.createElement("path",{d:"M168,144a40,40,0,1,0,40,40v-6.7",fill:"none",stroke:e,strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"16"}),r.createElement("path",{d:"M72,180H64A48,48,0,0,1,48,86.7V72a40,40,0,0,1,80,0V184",fill:"none",stroke:e,strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"16"}),r.createElement("path",{d:"M184,180h8a48,48,0,0,0,16-93.3V72a40,40,0,0,0-80,0",fill:"none",stroke:e,strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"16"}),r.createElement("path",{d:"M88,84v8a28,28,0,0,1-28,28",fill:"none",stroke:e,strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"16"}),r.createElement("path",{d:"M168,84v8a28,28,0,0,0,28,28",fill:"none",stroke:e,strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"16"}))}));var z=function(e,t){return u(e,t,I)},U=(0,r.forwardRef)((function(e,t){return r.createElement(f,Object.assign({ref:t},e,{renderPath:z}))}));U.displayName="Brain";const D=U;var V=new Map;V.set("bold",(function(e){return r.createElement(r.Fragment,null,r.createElement("circle",{cx:"128",cy:"128",r:"96",fill:"none",stroke:e,strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"24"}),r.createElement("circle",{cx:"128",cy:"120",r:"40",fill:"none",stroke:e,strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"24"}),r.createElement("path",{d:"M63.8,199.4a72,72,0,0,1,128.4,0",fill:"none",stroke:e,strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"24"}))})),V.set("duotone",(function(e){return r.createElement(r.Fragment,null,r.createElement("path",{d:"M128,32A96,96,0,0,0,63.8,199.4h0A72,72,0,0,1,128,160a40,40,0,1,1,40-40,40,40,0,0,1-40,40,72,72,0,0,1,64.2,39.4A96,96,0,0,0,128,32Z",opacity:"0.2"}),r.createElement("circle",{cx:"128",cy:"128",r:"96",fill:"none",stroke:e,strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"16"}),r.createElement("circle",{cx:"128",cy:"120",r:"40",fill:"none",stroke:e,strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"16"}),r.createElement("path",{d:"M63.8,199.4a72,72,0,0,1,128.4,0",fill:"none",stroke:e,strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"16"}))})),V.set("fill",(function(){return r.createElement(r.Fragment,null,r.createElement("circle",{cx:"128",cy:"120",r:"44"}),r.createElement("path",{d:"M128,24A104,104,0,1,0,232,128,104.2,104.2,0,0,0,128,24Zm65.8,162.4a81.3,81.3,0,0,0-24.5-23,59.7,59.7,0,0,1-82.6,0,81.3,81.3,0,0,0-24.5,23,88,88,0,1,1,131.6,0Z"}))})),V.set("light",(function(e){return r.createElement(r.Fragment,null,r.createElement("circle",{cx:"128",cy:"128",r:"96",fill:"none",stroke:e,strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"12"}),r.createElement("circle",{cx:"128",cy:"120",r:"40",fill:"none",stroke:e,strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"12"}),r.createElement("path",{d:"M63.8,199.4a72,72,0,0,1,128.4,0",fill:"none",stroke:e,strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"12"}))})),V.set("thin",(function(e){return r.createElement(r.Fragment,null,r.createElement("circle",{cx:"128",cy:"128",r:"96",fill:"none",stroke:e,strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"8"}),r.createElement("circle",{cx:"128",cy:"120",r:"40",fill:"none",stroke:e,strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"8"}),r.createElement("path",{d:"M63.8,199.4a72,72,0,0,1,128.4,0",fill:"none",stroke:e,strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"8"}))})),V.set("regular",(function(e){return r.createElement(r.Fragment,null,r.createElement("circle",{cx:"128",cy:"128",r:"96",fill:"none",stroke:e,strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"16"}),r.createElement("circle",{cx:"128",cy:"120",r:"40",fill:"none",stroke:e,strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"16"}),r.createElement("path",{d:"M63.8,199.4a72,72,0,0,1,128.4,0",fill:"none",stroke:e,strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"16"}))}));var W=function(e,t){return u(e,t,V)},H=(0,r.forwardRef)((function(e,t){return r.createElement(f,Object.assign({ref:t},e,{renderPath:W}))}));H.displayName="UserCircle";const q=H;var $=function(){return $=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},$.apply(this,arguments)};const Q=function(t){var n=t.ai,r=t.message;return(0,e.jsxs)("div",$({className:"w-full flex flex-row gap-2 items-center text-gray-100 p-1 rounded bg-gray-600"},{children:[(0,e.jsx)("div",$({className:"w-4 flex flex-col justify-start h-full"},{children:n?(0,e.jsx)(D,{weight:"bold",scale:16}):(0,e.jsx)(q,{weight:"bold",scale:16})})),(0,e.jsx)("p",$({className:"text-xs"},{children:r}))]}))};var Y=function(){return Y=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},Y.apply(this,arguments)};const K=function(){var t=function(){var e=(0,r.useContext)(N);if(!e)throw new Error("useChat must be used within a ChatProvider");return{chat:e.chat,loading:e.loading,prompt:e.prompt,setPrompt:e.setPrompt,submitPrompt:e.submitPrompt,setLoading:e.setLoading}}(),n=t.chat,a=t.setPrompt,i=t.prompt,l=t.submitPrompt,s=t.loading,u=O()[0];return(0,e.jsxs)("section",Y({className:"w-full h-full flex flex-col p-4 gap-4 bg-gray-600"},{children:[(0,e.jsx)("div",Y({className:"w-full h-[80%] flex flex-col p-2 gap-2 rounded bg-gray-800 overflow-scroll"},{children:n.map((function(t,n){return(0,e.jsx)(Q,Y({},t),n)}))})),(0,e.jsxs)("div",Y({className:"w-full h-[15%] flex flex-row gap-1"},{children:[(0,e.jsx)(o,{value:i,onChange:a,width:"w-[80%]"}),(0,e.jsx)("button",Y({className:"h-full w-[20%] rounded bg-gray-800 text-l text-gray-300",onClick:l,disabled:!u.apiKey||s},{children:"Submit"}))]}))]}))};var G=function(){return G=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},G.apply(this,arguments)};var X=n(3379),J=n.n(X),Z=n(7795),ee=n.n(Z),te=n(569),ne=n.n(te),re=n(3565),ae=n.n(re),oe=n(9216),ie=n.n(oe),le=n(4589),se=n.n(le),ue=n(3459),ce={};ce.styleTagTransform=se(),ce.setAttributes=ae(),ce.insert=ne().bind(null,"head"),ce.domAPI=ee(),ce.insertStyleElement=ie(),J()(ue.Z,ce),ue.Z&&ue.Z.locals&&ue.Z.locals,t.render((0,e.jsx)((function(){var t=(0,r.useState)({apiKey:B.apiKey}),n=t[0],o=t[1],i=(0,r.useState)(""),s=i[0],u=i[1],c=(0,r.useState)([]),d=c[0],f=c[1],p=(0,r.useState)(!1),h=p[0],A=p[1];return(0,e.jsx)(x,G({setSettings:o,settings:n},{children:(0,e.jsxs)(F,G({chat:d,prompt:s,setPrompt:u,setChat:f,loading:h,setLoading:A},{children:[(0,e.jsx)(j,{}),(0,e.jsx)("main",G({tabIndex:a.MAIN,className:"w-full h-full"},{children:(0,e.jsx)(K,{})})),(0,e.jsx)(l,{})]}))}))}),{}),document.getElementById("root"))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,